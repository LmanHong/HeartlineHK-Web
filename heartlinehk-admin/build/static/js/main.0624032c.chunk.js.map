{"version":3,"sources":["img/logo/logo_80x80.png","components/NavBar.js","pages/Chatroom.js","pages/Dashboard.js","pages/Login.js","App.js","index.js"],"names":["NavBar","props","href","className","src","logo","alt","to","onClick","handleLogout","currentUser","displayName","Chatroom","useState","firebase","database","ref","queueRef","assignedRef","uid","chatroomRef","clientQueue","setClientQueue","localStorage","getItem","currentClient","setCurrentClient","chatLog","setChatLog","isStartingChat","setIsStartingChat","isEndingChat","setIsEndingChat","isSendingMessage","setIsSendingMessage","handleChatLogChanges","snapshot","tmpChatLog","console","log","val","chatId","push","handleQueueChanges","tmpClientQueue","userId","length","idx","splice","startNewChat","e","a","progress","tmpCurrentClient","tmpInQueueTime","Error","ReferenceError","i","RangeError","queueClientRef","child","set","ServerValue","TIMESTAMP","assignedClientRef","initialMessageRef","setItem","error","message","remove","endChat","isClientLeft","once","isRoomAssignedNull","isSpecialMessage","removeItem","sendChatMessage","messageToBeSent","document","getElementById","value","newMessageRef","useEffect","orderByChild","on","off","map","type","name","id","placeholder","disabled","Dashboard","Login","onSubmit","handleLogin","htmlFor","required","App","setCurrentUser","isLoggingIn","setIsLoggingIn","auth","preventDefault","currentEmail","currentPassword","signInWithEmailAndPassword","alert","signOut","onAuthStateChanged","user","style","width","minHeight","position","backgroundColor","display","flexDirection","overflow","exact","path","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0624032c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_80x80.6314ce1a.png\";","import { Link } from \"react-router-dom\";\r\nimport logo from \"../img/logo/logo_80x80.png\";\r\nimport \"../styles/NavBar.css\";\r\n\r\nconst NavBar = (props) =>{\r\n\r\n    return (\r\n        <nav>\r\n            <a href=\"#\" className=\"nav-logo\">\r\n                <img src={logo} alt={logo} className=\"front\" />\r\n                <p className=\"nav-name\">HEARTLINEHK</p>\r\n            </a>\r\n            <ul className=\"nav-items-container\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/\" className=\"nav-link\">\r\n                        <span className=\"material-icons\">home</span> Dashboard\r\n                    </Link>    \r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/chatroom\" className=\"nav-link\">\r\n                        <span className=\"material-icons\">chat</span> Chatroom\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n            <div className=\"nav-user\">\r\n                <img src=\"https://t4.ftcdn.net/jpg/02/34/61/79/360_F_234617921_p1AGQkGyEl8CSzwuUI74ljn6IZXqMUf2.jpg\" alt=\"\" />\r\n                <a href=\"\" className=\"username\" onClick={props.handleLogout}>{props.currentUser.displayName}</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n\r\n","import \"../styles/Chatroom.css\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst Chatroom = (props) =>{\r\n\r\n    //Chat Queue database reference\r\n    const [queueRef, setQueueRef] = useState(firebase.database().ref('chat_queue'));\r\n    //Room Assigned database reference\r\n    const [assignedRef, setAssignedRef] = useState(firebase.database().ref('room_assigned'));\r\n    //Chatroom database reference\r\n    const [chatroomRef, setChatroomRef] = useState(firebase.database().ref(`chat_log/${props.currentUser.uid}`));\r\n    //Chat Queue local list copy\r\n    const [clientQueue, setClientQueue] = useState([]);\r\n    //Current Chat Client ID\r\n    const [currentClient, setCurrentClient] = useState(localStorage.getItem('heartlinehk-currentClient'));\r\n    //Chat Log local list copy\r\n    const [chatLog, setChatLog] = useState([]);\r\n    //Flag indicating a start-chat is in progress\r\n    const [isStartingChat, setIsStartingChat] = useState(false);\r\n    //Flag indicating an end-chat is in progress\r\n    const [isEndingChat, setIsEndingChat] = useState(false);\r\n    //Flag indicating a chat message is being sent\r\n    const [isSendingMessage, setIsSendingMessage] = useState(false);\r\n\r\n    //Callback for handling new chat messages\r\n    const handleChatLogChanges = (snapshot)=>{\r\n        let tmpChatLog = [];\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (const chatId in snapshot.val()) tmpChatLog.push({\r\n                'chatId': chatId,\r\n                'uid': snapshot.val()[chatId]['uid'],\r\n                'time': snapshot.val()[chatId]['time'],\r\n                'msg': snapshot.val()[chatId]['msg'],\r\n                'spc': snapshot.val()[chatId]['spc']\r\n            });\r\n        }\r\n        console.log(tmpChatLog);\r\n        setChatLog(tmpChatLog);\r\n    };\r\n\r\n    //Callback for handling Chat Queue changes\r\n    const handleQueueChanges = (snapshot)=>{\r\n        let tmpClientQueue = [];\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (const userId in snapshot.val())\r\n                if (tmpClientQueue.length == 0) tmpClientQueue.push({\r\n                    'userId': userId,\r\n                    'status': snapshot.val()[userId]['status'],\r\n                    'time': snapshot.val()[userId]['time']\r\n                });\r\n                else for (let idx in tmpClientQueue){\r\n                    if (tmpClientQueue[idx]['time'] >= snapshot.val()[userId]['time']){\r\n                        tmpClientQueue.splice(idx, 0, {\r\n                            'userId': userId,\r\n                            'status': snapshot.val()[userId]['status'],\r\n                            'time': snapshot.val()[userId]['time']\r\n                        });\r\n                        break;\r\n                    }else if (idx === tmpClientQueue.length-1){\r\n                        tmpClientQueue.push({\r\n                            'userId': userId,\r\n                            'status': snapshot.val()[userId]['status'],\r\n                            'time': snapshot.val()[userId]['time']\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n        }\r\n        console.log(tmpClientQueue);\r\n        setClientQueue(tmpClientQueue);\r\n    }\r\n\r\n    //Function for initiating a new chat\r\n    const startNewChat = async (e)=>{\r\n        //Progress variable indicates the progress of the start-chat function\r\n        //This can be used to reset everything done if an error has occurred\r\n        let progress = 0;\r\n        //Temp target client ID\r\n        let tmpCurrentClient = null;\r\n        //Temp target client's time-of-arrival in queue\r\n        let tmpInQueueTime = null;\r\n        try{\r\n            //Check if a new chat is already starting\r\n            if (isStartingChat) throw new Error(\"Already starting a new chat!\");\r\n            setIsStartingChat(true);\r\n\r\n            //Check if all database references are available\r\n            if (!queueRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Chat Queue reference not available!\");\r\n            }else if (!assignedRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Room Assigned reference not available!\");\r\n            }else if (!chatroomRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Chat Room reference not available!\");\r\n            }\r\n           //Check if current client is already set\r\n            else if (currentClient != null){\r\n                setIsStartingChat(false);\r\n                throw new Error(\"CurrentClient is already set!\");\r\n            }else{\r\n                //Get the target client\r\n                for (let i in clientQueue){\r\n                    if (clientQueue[i]['status'] === \"inQueue\"){\r\n                        tmpCurrentClient = clientQueue[i]['userId'];\r\n                        tmpInQueueTime = clientQueue[i]['time'];\r\n                        break;\r\n                    }\r\n                }\r\n                if (tmpCurrentClient === null) throw new RangeError(\"No available client in chat queue!\");\r\n\r\n                //Set target client queue status to \"roomAssigned\"\r\n                //This is to prevent multiple volunteers dequeueing the same client\r\n                let queueClientRef = queueRef.child(tmpCurrentClient);\r\n                await queueClientRef.set({\r\n                    'status': \"roomAssigned\",\r\n                    \"time\": firebase.database.ServerValue.TIMESTAMP\r\n                });\r\n                progress += 1;\r\n\r\n                //Set the assigned room of the client to current volunteer ID\r\n                let assignedClientRef = assignedRef.child(tmpCurrentClient);\r\n                await assignedClientRef.set(props.currentUser.uid);\r\n                progress += 1;\r\n\r\n                //Send an initial message to the chat\r\n                let initialMessageRef = await chatroomRef.push();\r\n                await initialMessageRef.set({\r\n                    'uid': props.currentUser.uid,\r\n                    'time': firebase.database.ServerValue.TIMESTAMP,\r\n                    'spc': tmpCurrentClient\r\n                });\r\n                progress += 1;\r\n\r\n                //Set current client\r\n                localStorage.setItem('heartlinehk-clientId', tmpCurrentClient);\r\n                setCurrentClient(tmpCurrentClient);\r\n\r\n                //End of procedure of starting a new chat\r\n                setIsStartingChat(false);\r\n            }\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            //Resets all finished progress\r\n            if (progress >= 1) await queueRef.child(tmpCurrentClient).set({\r\n                'status': \"inQueue\",\r\n                \"time\": tmpInQueueTime\r\n            });\r\n            if (progress >= 2) await assignedRef.child(tmpCurrentClient).remove();\r\n            //If the step fails at this stage, \r\n            //meaning all the works on database are done.\r\n            //So no resetting is needed. \r\n            if (progress >= 3){\r\n                localStorage.setItem('heartlinehk-currentClient', tmpCurrentClient);\r\n                setCurrentClient(tmpCurrentClient);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Function for ending a continuing chat\r\n    const endChat = async (e) =>{\r\n        //Progress variable indicates the progress of the start-chat function\r\n        //This can be used to reset everything done if an error has occurred\r\n        let progress = 0;\r\n        //Flag indicating if the client has left or not\r\n        let isClientLeft = false;\r\n        try{\r\n            //Check if a chat is already ending\r\n            if (isEndingChat) throw new Error(\"Already ending a chat!\");\r\n            setIsEndingChat(true);\r\n\r\n            //Check if all database references are available\r\n            if (!assignedRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Room Assigned reference not available!\");\r\n            }else if (!chatroomRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Chat Room reference not available!\");\r\n            }\r\n            //Check if current client is null or not\r\n            else if (currentClient == null){\r\n                setIsEndingChat(false);\r\n                throw new Error(\"Current Client is null!\");\r\n            }else{\r\n                //Check if current client has left\r\n                //The client has left when either the room assigned is null\r\n                let snapshot = await assignedRef.child(currentClient).once('value');\r\n                let isRoomAssignedNull = (snapshot.val() === null);\r\n                //or the chat log has a special message of \"clientLeft\"\r\n                let isSpecialMessage  = false; \r\n                for (let i in chatLog){\r\n                    if (chatLog[i]['spc'] === \"clientLeft\"){\r\n                        isSpecialMessage = true;\r\n                        break;\r\n                    } \r\n                }\r\n                isClientLeft = (isRoomAssignedNull || isSpecialMessage);\r\n                progress += 1;\r\n\r\n                //If client hasn't left, set the room assigned to \"volunLeft\"\r\n                if (!isClientLeft) await assignedRef.child(currentClient).set(\"volunLeft\");\r\n                progress += 1;\r\n\r\n                //Delete the chat log\r\n                await chatroomRef.remove();\r\n                setChatLog([]);\r\n                progress += 1;\r\n\r\n                //Reset current client\r\n                localStorage.removeItem('heartlinehk-currentClient');\r\n                setCurrentClient(null);\r\n\r\n                //End of procedure of ending a chat\r\n                setIsEndingChat(false);\r\n            }\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            if (progress >= 2){\r\n                if (!isClientLeft) await assignedRef.child(currentClient).set(props.currentUser.uid);\r\n            } \r\n            //If the step fails at this stage, \r\n            //meaning all the works on database are done.\r\n            //So no resetting is needed. \r\n            if (progress >= 3){\r\n                localStorage.removeItem('heartlinehk-currentClient');\r\n                setCurrentClient(null);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const sendChatMessage = async (e)=>{\r\n        try{\r\n            //Check if a message is already sending\r\n            if (isSendingMessage) throw new Error(\"Already sending a message!\");\r\n            setIsSendingMessage(true);\r\n\r\n            //Check if a chat is ongoing\r\n            if (currentClient === null){\r\n                setIsSendingMessage(false);\r\n                throw new Error(\"Current Client is null!\");\r\n            }\r\n            //Check if the message to be sent is empty\r\n            let messageToBeSent = document.getElementById('msg-input').value;\r\n            if (messageToBeSent == null || messageToBeSent == \"\"){\r\n                setIsSendingMessage(false);\r\n                throw new Error(\"Message to be sent is empty!\");\r\n            }else if (!chatroomRef){\r\n                setIsSendingMessage(false);\r\n                throw new ReferenceError(\"Chatroom reference not available!\");\r\n            }else{\r\n                //Send the message to chatroom\r\n                let newMessageRef = await chatroomRef.push();\r\n                await newMessageRef.set({\r\n                    'uid': props.currentUser.uid,\r\n                    'time': firebase.database.ServerValue.TIMESTAMP,\r\n                    'msg': messageToBeSent\r\n                });\r\n                //Clear the message input\r\n                document.getElementById('msg-input').value = \"\";\r\n                console.log(\"Message sent!\");\r\n\r\n                setIsSendingMessage(false);\r\n            }\r\n        }catch (error){\r\n            console.error(\"ERROR: \"+error.message);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        \r\n        console.log(\"Chatroom mounted!\");\r\n        if (queueRef) queueRef.orderByChild('time').on('value', handleQueueChanges);\r\n        if (chatroomRef){\r\n            chatroomRef.orderByChild('time').on('value', handleChatLogChanges);\r\n        }\r\n        return ()=>{\r\n            //Unsubscribe events when unmount component\r\n            console.log(\"Chatroom Unmounted!\");\r\n            if (queueRef) queueRef.orderByChild('time').off('value', handleQueueChanges);\r\n            if (chatroomRef) chatroomRef.orderByChild('time').off('value', handleChatLogChanges);\r\n        };\r\n    }, [queueRef, chatroomRef]);\r\n\r\n    return (\r\n        <div className=\"chatroom\">\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages-container\">\r\n                    {chatLog.map((val, idx)=>{\r\n                        return(\r\n                            <p key={val['chatId']} className={\"message \"+(val['uid'] === props.currentUser.uid?\"right\":\"left\")}>\r\n                                {(val['msg']?val['msg']:(val['spc']?val['spc']:\"No message\"))}\r\n                                <span>{val['time']}</span>\r\n                            </p>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className=\"input-container\">\r\n                    <input type=\"text\" name=\"msg-input\" id=\"msg-input\" placeholder=\"按此對話…\" />\r\n                    <button type=\"submit\" name=\"submit-btn\" id=\"submit-btn\" onClick={sendChatMessage}><span className=\"material-icons\">send</span></button>\r\n                </div>\r\n            </div>\r\n            <div className=\"queue-container\">\r\n                <p className=\"main-text\">Queue Count: <span className=\"queue-count\">{clientQueue.length}</span></p>\r\n                <div className=\"clients-container\">\r\n                    {clientQueue.map((val, idx)=>{\r\n                        return (\r\n                            <p key={val['userId']} className={\"queue-client\"+(val['status'] === \"roomAssigned\"?\" assigned\":\"\")}>Client <span className=\"client-id\">{val['userId']}</span></p>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                    <button type=\"submit\" name=\"start-btn\" id=\"start-btn\" disabled={currentClient != null || clientQueue.length <= 0} onClick={startNewChat}>Start Chat</button>\r\n                    <button type=\"submit\" name=\"end-btn\" id=\"end-btn\" disabled={currentClient == null} onClick={endChat}>End Chat</button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chatroom;","import \"../styles/Dashboard.css\";\r\n\r\nconst Dashboard = () =>{\r\n    return(\r\n        <div className=\"dashboard\">\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import \"../styles/Login.css\";\r\n\r\nconst Login = (props) =>{\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <h1 className=\"main-text\">HeartlineHK Login</h1>\r\n            <form className=\"login-form\" onSubmit={props.handleLogin}>\r\n                <label htmlFor=\"login-email\">Email:</label>\r\n                <input type=\"email\" name=\"login-email\" id=\"login-email\" required />\r\n                <label htmlFor=\"login-pwd\">Password:</label>\r\n                <input type=\"password\" name=\"login-password\" id=\"login-password\" required />\r\n                <input type=\"submit\" value=\"Login\" name=\"login-submit\" id=\"login-submit\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar.js\";\nimport Chatroom from \"./pages/Chatroom.js\";\nimport Dashboard from \"./pages/Dashboard.js\";\nimport Login from \"./pages/Login.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nfunction App() {\n\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [auth, setAuth] = useState(firebase.auth());\n\n  const handleLogin = async (e) =>{\n    e.preventDefault();\n    if (!isLoggingIn){\n        setIsLoggingIn(true);\n        let currentEmail = document.getElementById('login-email').value;\n        let currentPassword = document.getElementById('login-password').value;\n        try{\n          await auth.signInWithEmailAndPassword(currentEmail, currentPassword);\n          console.log(auth.currentUser);\n        }catch (error){\n          console.error(error.message);\n          alert(error.message);\n        }\n        setIsLoggingIn(false);\n    }else{\n      console.error(\"Already logging in\");\n      alert(\"Already logging in!\");\n    }\n  }\n\n  const handleLogout = async (e) =>{\n    try{\n      await auth.signOut();\n      console.log(\"Signed out!\");\n    }catch(error){\n      console.error(error.message);\n      alert(error.message);\n    }\n  }\n\n  useEffect(()=>{\n    const authChangeListener = firebase.auth().onAuthStateChanged((user)=>{\n      if (user) setCurrentUser(user);\n      else setCurrentUser(null);\n    });\n    return authChangeListener;\n  });\n\n  return (\n    <Router>\n      <div className=\"App\" style={{width: \"100vw\", minHeight: \"100vh\", position: \"relative\", backgroundColor: \"rgba(0,0,0,0.05)\", display: \"flex\", flexDirection:\"row\", overflow: \"hidden\"}}>\n        {!currentUser && <Login handleLogin={handleLogin}/>}\n        {currentUser && \n          <>\n          <NavBar currentUser={currentUser} handleLogout={handleLogout}/>\n          <Switch>\n            <Route exact path=\"/chatroom\">\n              <Chatroom currentUser={currentUser}/>\n            </Route>\n            <Route path=\"/\">\n              <Dashboard currentUser={currentUser}/>\n            </Route>\n          </Switch>\n          </>\n        }\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD-gB_LHwUq2qiUXdDt2CAxGCYQQla4hMo\",\n  authDomain: \"heartlinehk-8e3ec.firebaseapp.com\",\n  databaseURL: \"https://heartlinehk-8e3ec-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"heartlinehk-8e3ec\",\n  storageBucket: \"heartlinehk-8e3ec.appspot.com\",\n  messagingSenderId: \"1077537941035\",\n  appId: \"1:1077537941035:web:f5b566fde9a2363a2d6c6e\",\n  measurementId: \"G-S9JD41562T\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\n/*\nfirebase.database().useEmulator(\"localhost\", 9000);\nfirebase.auth().useEmulator(\"http://localhost:9099\");\n*/\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}