{"version":3,"sources":["components/ConfirmModal.js","img/logo/logo_80x80.png","components/NavBar.js","pages/ProfileUpdate.js","pages/Supervisor.js","components/Loading.js","sound/pristine-609.mp3","pages/Chatroom.js","pages/Dashboard.js","pages/Login.js","App.js","index.js"],"names":["ConfirmModal","props","id","modalId","className","onSubmit","formSubmitHandler","confirmText","type","name","onClick","NavBar","menuNav","useRef","navBackgroundDiv","useState","isSupervisor","setIsSupervisor","closeNav","current","style","transitionDuration","classList","remove","useEffect","firebase","database","ref","child","currentUser","uid","once","snapshot","val","add","href","src","logo","alt","to","handleLogout","displayName","ProfileUpdate","displayNameInputRef","handleProfileUpdate","e","a","preventDefault","newDisplayName","value","updateProfile","alert","Error","console","error","message","htmlFor","Supervisor","specialChatMessages","assignedRef","disconnectRef","chatroomRef","messageContainerDiv","disconnectTime","setDisconnectTime","roomAssigned","setRoomAssigned","chatLog","setChatLog","handleChatLogChanges","tmpChatLog","log","chatId","push","handleRoomAssignedChanges","tmpRoomAssigned","clientId","handleConnectionChanges","selectVolun","target","volunId","innerHTML","localCurrentVolun","sessionStorage","getItem","localCurrentClient","orderByChild","off","setItem","on","getFormattedDateString","msec","targetDate","Date","hourString","getHours","toString","minuteString","getMinutes","monthString","getMonth","getDate","removeItem","length","scrollTo","scrollHeight","map","idx","Loading","Chatroom","queueRef","typingRef","recordFormUrl","recordFormEntries","clientContainerDiv","clientQueue","setClientQueue","currentClient","setCurrentClient","isStartingChat","setIsStartingChat","isEndingChat","setIsEndingChat","isSendingMessage","setIsSendingMessage","isQueueOpened","setIsQueueOpened","isClientTyping","setIsClientTyping","isUserTyping","setIsUserTyping","isPickerOpened","setIsPickerOpened","handleQueueChanges","tmpClientQueue","isNewEnqueue","oldClientQueue","document","querySelectorAll","userId","isOldEnqueue","forEach","client","i","j","tmp","Audio","newClientSound","play","handleTypingStatusChanges","setupChatroomListener","assignedSnapshot","warn","startNewChat","progress","tmpCurrentClient","tmpInQueueTime","ReferenceError","RangeError","queueClientRef","transaction","queueClient","ServerValue","TIMESTAMP","queueClientTransaction","committed","assignedClientRef","assignedClient","assignedClientTransaction","initialMessageRef","initialMessage","initialMessageTransaction","set","endChat","isClientLeft","startChatMsec","endChatMsec","isRoomAssignedNull","isSpecialMessage","isClientInQueue","limitToFirst","initialChatMessage","now","chatroomTransaction","startChatTime","startChatHour","startChatMinutes","endChatTime","endChatHour","endChatMinutes","currentMonth","currentDay","prefilledRecordFormUrl","getFullYear","window","open","sendChatMessage","messageToBeSent","getElementById","newMessageRef","newMessage","newMessageTransaction","specialCharHandler","specialChar","msgInput","querySelector","originalMsgStart","substring","selectionStart","originalMsgEnd","selectionEnd","focus","setSelectionRange","toggleQueue","toggle","scrollSpecialChar","rem","parseFloat","getComputedStyle","documentElement","fontSize","spcCharDiv","arrowButton","scrollBy","modalContainerDiv","parentElement","char","placeholder","onInput","currentlyTyping","onEmojiClick","emojiObject","emoji","data-time","disabled","Dashboard","Login","handleLogin","required","App","setCurrentUser","isLoggingIn","setIsLoggingIn","auth","currentEmail","currentPassword","setPersistence","Auth","Persistence","SESSION","signInWithEmailAndPassword","signOut","onAuthStateChanged","user","width","minHeight","position","backgroundColor","display","flexDirection","overflow","exact","path","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.644956d0.chunk.js","sourcesContent":["import \"../styles/ConfirmModal.css\";\r\n\r\nconst ConfirmModal = (props)=>{\r\n\r\n    return (\r\n        <div id={(props.modalId?props.modalId:\"default-modal\")} className=\"modal-container\">\r\n            <form className=\"confirm-modal\" onSubmit={props.formSubmitHandler}>\r\n                <p className=\"confirm-text\">{(props.confirmText?props.confirmText:\"Changes might be lost if you leave now. Confirm?\")}</p>\r\n                <button type=\"submit\" name=\"confirm-btn\" className=\"confirm-btn\" onClick={props.formSubmitHandler}>確定</button>\r\n                <button type=\"submit\" name=\"cancel-btn\" className=\"cancel-btn\" onClick={props.formSubmitHandler}>取消</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmModal;","export default __webpack_public_path__ + \"static/media/logo_80x80.6314ce1a.png\";","import { useRef, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../img/logo/logo_80x80.png\";\r\nimport \"../styles/NavBar.css\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nconst NavBar = (props) =>{\r\n\r\n    const menuNav = useRef();\r\n    const navBackgroundDiv = useRef();\r\n    const [isSupervisor, setIsSupervisor] = useState(false);\r\n\r\n    const openNav = ()=>{\r\n        menuNav.current.style.transitionDuration = \"0.5s\";\r\n        menuNav.current.classList.add(\"opened\");\r\n        navBackgroundDiv.current.classList.add(\"opened\");\r\n    };\r\n\r\n    const closeNav = ()=>{\r\n        menuNav.current.style.transitionDuration = \"0.5s\";\r\n        menuNav.current.classList.remove(\"opened\");\r\n        navBackgroundDiv.current.classList.remove(\"opened\");\r\n    }\r\n\r\n    useEffect(()=>{\r\n        firebase.database().ref('supervisors').child(props.currentUser.uid).once('value', (snapshot)=>{\r\n            if (snapshot.val() != null) setIsSupervisor(true);\r\n            else setIsSupervisor(false);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <button className=\"nav-toggle-btn\" onClick={openNav}><span className=\"material-icons\">menu</span></button>\r\n\r\n        <nav className=\"nav-container\" ref={menuNav}>\r\n            <a href=\"#\" className=\"nav-logo\">\r\n                <img src={logo} alt={logo} className=\"front\" />\r\n                <p className=\"nav-name\">HEARTLINEHK</p>\r\n            </a>\r\n            <ul className=\"nav-items-container\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">home</span> 資訊版面\r\n                    </Link>    \r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/chatroom\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">chat</span> 聊天室\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/profile-update\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">badge</span> 更改個人資料\r\n                    </Link>\r\n                </li>\r\n                {isSupervisor && \r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/supervisor\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">question_answer</span> 管理員版面\r\n                    </Link>\r\n                </li>\r\n                }\r\n\r\n            </ul>\r\n            <div className=\"nav-user\" onClick={props.handleLogout}>\r\n                <img src=\"https://t4.ftcdn.net/jpg/02/34/61/79/360_F_234617921_p1AGQkGyEl8CSzwuUI74ljn6IZXqMUf2.jpg\" alt=\"\" />\r\n                <a className=\"username\">{props.currentUser.displayName}</a>\r\n            </div>\r\n        </nav>\r\n\r\n        <div ref={navBackgroundDiv} className=\"nav-background\" onClick={closeNav}></div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n\r\n//                \r\n//\r\n//\r\n//","import \"../styles/ProfileUpdate.css\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { useRef } from \"react\";\r\n\r\nconst ProfileUpdate = (props)=>{\r\n\r\n    const displayNameInputRef = useRef();\r\n\r\n    const handleProfileUpdate = async (e)=>{\r\n        e.preventDefault();\r\n        try{\r\n            if (props.currentUser){\r\n                const newDisplayName = displayNameInputRef.current.value;\r\n                if (newDisplayName != \"\"){\r\n                    await props.currentUser.updateProfile({\r\n                        displayName: newDisplayName\r\n                    });\r\n                    displayNameInputRef.current.value = \"\";\r\n                    alert(\"Profile Update Successful!\");\r\n                }else throw new Error(\"New Display Name is null!\");\r\n            }else throw new Error(\"Current User is null!\");\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            alert(error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-update\">\r\n            <form className=\"update-form\" onSubmit={handleProfileUpdate}>\r\n                <label htmlFor=\"display-name-input\">新顯示名稱</label>\r\n                <input ref={displayNameInputRef} type=\"text\" name=\"display-name-input\" id=\"display-name-input\" />\r\n                <button type=\"submit\">更改資料</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileUpdate;","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport \"../styles/Supervisor.css\";\r\n\r\nconst Supervisor = (props)=>{\r\n\r\n    const specialChatMessages = {\r\n        'clientLeft': \"使用者已離開聊天室\",\r\n        'volunLeft': \"義工已離開聊天室\",\r\n        'clientId': \"義工已開啟聊天室\"\r\n    }\r\n    //Room Assigned database reference\r\n    const assignedRef = firebase.database().ref('room_assigned');\r\n    //Disconnect Time database reference\r\n    const disconnectRef = firebase.database().ref('disconnect_time');   \r\n    //Chatroom database reference\r\n    const chatroomRef = firebase.database().ref('chat_log');\r\n    //Refernce of the Message container div \r\n    const messageContainerDiv = useRef(null);\r\n    //Disconnect time of current client\r\n    const [disconnectTime, setDisconnectTime] = useState(null);\r\n    //Room Assigned local list copy\r\n    const [roomAssigned, setRoomAssigned] = useState([]);\r\n    //Chat Log local list copy\r\n    const [chatLog, setChatLog] = useState([]);\r\n    //Flag indicating the current user is supervisor\r\n    const [isSupervisor, setIsSupervisor] = useState(false);\r\n\r\n\r\n    //Callback for handling new chat messages\r\n    const handleChatLogChanges = (snapshot)=>{\r\n        let tmpChatLog = [];\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (const chatId in snapshot.val()) tmpChatLog.push({\r\n                'chatId': chatId,\r\n                'uid': snapshot.val()[chatId]['uid'],\r\n                'time': snapshot.val()[chatId]['time'],\r\n                'msg': snapshot.val()[chatId]['msg'],\r\n                'spc': snapshot.val()[chatId]['spc']\r\n            });\r\n        }\r\n        console.log(tmpChatLog);\r\n        setChatLog(tmpChatLog);\r\n    };\r\n\r\n    //Callback for handling room assigned\r\n    const handleRoomAssignedChanges = (snapshot)=>{\r\n        let tmpRoomAssigned = [];\r\n        if (snapshot.val() != null){\r\n            for (const clientId in snapshot.val()){\r\n                if (snapshot.val()[clientId] != 'volunLeft') tmpRoomAssigned.push({\r\n                    'clientId': clientId,\r\n                    'volunId': snapshot.val()[clientId]\r\n                });\r\n            }\r\n        }\r\n        console.log(tmpRoomAssigned);\r\n        setRoomAssigned(tmpRoomAssigned);\r\n    }\r\n\r\n    //Callback for handling disconnect/reconnect changes\r\n    const handleConnectionChanges = (snapshot)=>{\r\n        setDisconnectTime(snapshot.val());\r\n    };\r\n\r\n    //Function for handling the selection of volunteer\r\n    const selectVolun = (e)=>{\r\n        const clientId = e.target.value;\r\n        const volunId = e.target.innerHTML;\r\n        console.log(clientId);\r\n        console.log(volunId);\r\n        \r\n        const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n        const localCurrentClient = sessionStorage.getItem('heartlinehk-supervisor-currentClient');\r\n        if (localCurrentVolun) chatroomRef.child(localCurrentVolun).orderByChild('time').off('value');\r\n        if (localCurrentClient) disconnectRef.child(localCurrentClient).off('value'); \r\n        \r\n        sessionStorage.setItem('heartlinehk-supervisor-currentClient', clientId);\r\n        sessionStorage.setItem('heartlinehk-supervisor-currentVolun', volunId);\r\n        chatroomRef.child(volunId).orderByChild('time').on('value', handleChatLogChanges);\r\n        disconnectRef.child(clientId).on('value', handleConnectionChanges);\r\n    }\r\n\r\n    const getFormattedDateString = (msec) =>{\r\n        let targetDate = new Date(msec);\r\n        let hourString = (targetDate.getHours()<10?\"0\"+targetDate.getHours().toString():targetDate.getHours().toString());\r\n        let minuteString = (targetDate.getMinutes()<10?\"0\"+targetDate.getMinutes().toString():targetDate.getMinutes().toString());\r\n        let monthString = (targetDate.getMonth()<9?\"0\"+(targetDate.getMonth()+1).toString():(targetDate.getMonth()+1).toString());\r\n        let dayString = (targetDate.getDate()<10?\"0\"+targetDate.getDate().toString():targetDate.getDate().toString());\r\n\r\n        return (hourString+\":\"+minuteString+\", \"+dayString+\"/\"+monthString);\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        firebase.database().ref('supervisors').child(props.currentUser.uid).once('value', (snapshot)=>{\r\n            if (snapshot.val() != null) setIsSupervisor(true);\r\n            else setIsSupervisor(false);\r\n        });\r\n        assignedRef.on('value', handleRoomAssignedChanges);\r\n\r\n\r\n        return()=>{\r\n            //Unsubscribe events when unmount component\r\n            console.log(\"Supervisor Unmounted!\");\r\n            assignedRef.off('value');\r\n            const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n            const localCurrentClient = sessionStorage.getItem('heartlinehk-supervisor-currentClient');\r\n            if (localCurrentVolun){\r\n                chatroomRef.child(localCurrentVolun).orderByChild('time').off('value');\r\n                sessionStorage.removeItem('heartlinehk-supervisor-currentVolun');\r\n            }\r\n            if (localCurrentClient){\r\n                disconnectRef.child(localCurrentClient).off('value');\r\n                sessionStorage.removeItem('heartlinehk-supervisor-currentClient');\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if (chatLog.length > 0){\r\n            messageContainerDiv.current.scrollTo(0, messageContainerDiv.current.scrollHeight);\r\n        }\r\n    }, [chatLog]);\r\n\r\n    return (\r\n        <div className=\"supervisor\">\r\n            <div className=\"volunteers-container\">\r\n                {roomAssigned.map((val, idx)=>{\r\n                    const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n                    return (\r\n                        <button key={val['clientId']} className={\"volun-btn\"+(localCurrentVolun === val['volunId']?\" selected\":\"\")} onClick={selectVolun} value={val['clientId']}>{val['volunId']}</button>\r\n                    );\r\n                })}\r\n            </div>\r\n            {disconnectTime != null &&\r\n                <p className=\"disconnect-msg\">使用者已於{getFormattedDateString(disconnectTime)}開始離線。</p>\r\n            }\r\n            <div ref={messageContainerDiv} className=\"chat-container\">\r\n                {chatLog.length > 0 && chatLog.map((val, idx)=>{\r\n                    const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n                    return(\r\n                        <p key={val['chatId']} className={\"message \"+(val['spc']?\"special\":(val['uid'] === localCurrentVolun?\"right\":\"left\"))}>\r\n                            {(val['msg']?val['msg']:(specialChatMessages[val['spc']]?specialChatMessages[val['spc']]:specialChatMessages['clientId']))}\r\n                            <span>{getFormattedDateString(val['time'])}</span>\r\n                        </p>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supervisor;","import \"../styles/Loading.css\";\r\n\r\nconst Loading = ()=>{\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"spinning-circle\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;","export default __webpack_public_path__ + \"static/media/pristine-609.9287f5ce.mp3\";","import Loading from \"../components/Loading.js\";\r\nimport ConfirmModal from \"../components/ConfirmModal.js\";\r\nimport Picker from \"emoji-picker-react\";\r\nimport \"../styles/Chatroom.css\";\r\nimport newClientSound from \"../sound/pristine-609.mp3\"\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\nconst Chatroom = (props) =>{\r\n\r\n    const specialChineseChars = ['啲','咁','嗰','咗','喺','係','哋','唔','咩','咪','嘅','㗎','喎','嘢','嚟','囉','乜','叻','呢','啱','睇','諗','噏','嘥','晒','咋','瞓','唞','氹','攰','俾','閂','呀','啦','冧','晏','嬲','喇'];\r\n    const specialChatMessages = {\r\n        'clientLeft': \"使用者已離開聊天室\",\r\n        'volunLeft': \"義工已離開聊天室\",\r\n        'clientId': \"義工已開啟聊天室\"\r\n    }\r\n\r\n    //Chat Queue database reference\r\n    const queueRef = firebase.database().ref('chat_queue');\r\n    //Room Assigned database reference\r\n    const assignedRef = firebase.database().ref('room_assigned');\r\n    //Disconnect Time database reference\r\n    const disconnectRef = firebase.database().ref('disconnect_time');\r\n    //Typing Status database reference\r\n    const typingRef = firebase.database().ref('typing_status');\r\n    //Chatroom database reference\r\n    const chatroomRef = firebase.database().ref(`chat_log/${props.currentUser.uid}`);\r\n    //Chat record Google Form\r\n    const recordFormUrl = \"https://docs.google.com/forms/d/e/1FAIpQLSdsD_qLU51OC9UY0Rrx_Ht52aU0TgPU-LUu5yNp4ta8cYu0yQ/viewform?usp=pp_url\";    \r\n    //Chat record Google Form field entries\r\n    const recordFormEntries = {\r\n        'date': \"entry.1533999842\",\r\n        'startTime': \"entry.240218030\",\r\n        'endTime': \"entry.1133078412\"\r\n    }\r\n    //Refernce of the Message container div \r\n    const messageContainerDiv = useRef(null);\r\n    //Reference of the Client container div;\r\n    const clientContainerDiv = useRef(null);\r\n    //Chat Queue local list copy\r\n    const [clientQueue, setClientQueue] = useState([]);\r\n    //Current Chat Client ID\r\n    const [currentClient, setCurrentClient] = useState(null);\r\n    //Disconnect time of current client\r\n    const [disconnectTime, setDisconnectTime] = useState(null);\r\n    //Chat Log local list copy\r\n    const [chatLog, setChatLog] = useState([]);\r\n    //Flag indicating a start-chat is in progress\r\n    const [isStartingChat, setIsStartingChat] = useState(false);\r\n    //Flag indicating an end-chat is in progress\r\n    const [isEndingChat, setIsEndingChat] = useState(false);\r\n    //Flag indicating a chat message is being sent\r\n    const [isSendingMessage, setIsSendingMessage] = useState(false);\r\n    //Flag indicating the chat queue container is shown full screen (in smaller screen devices)\r\n    const [isQueueOpened, setIsQueueOpened] = useState(false);\r\n    //Flag indicating the current client is typing\r\n    const [isClientTyping, setIsClientTyping] = useState(false);\r\n    //Flag indicating the current user is typing\r\n    const [isUserTyping, setIsUserTyping] = useState(false);\r\n    //Flag indicating the emoji picker is opened\r\n    const [isPickerOpened, setIsPickerOpened] = useState(false);\r\n\r\n\r\n    //Callback for handling new chat messages\r\n    const handleChatLogChanges = (snapshot)=>{\r\n        let tmpChatLog = [];\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (const chatId in snapshot.val()) tmpChatLog.push({\r\n                'chatId': chatId,\r\n                'uid': snapshot.val()[chatId]['uid'],\r\n                'time': snapshot.val()[chatId]['time'],\r\n                'msg': snapshot.val()[chatId]['msg'],\r\n                'spc': snapshot.val()[chatId]['spc']\r\n            });\r\n        }\r\n        console.log(tmpChatLog);\r\n        setChatLog(tmpChatLog);\r\n    };\r\n\r\n    //Callback for handling Chat Queue changes\r\n    const handleQueueChanges = (snapshot)=>{\r\n        let tmpClientQueue = [];\r\n        let isNewEnqueue = false;\r\n        const oldClientQueue = document.querySelectorAll('.chatroom .queue-container .clients-container .queue-client .client-id');\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (let userId in snapshot.val()){\r\n                tmpClientQueue.push({\r\n                    'userId': userId,\r\n                    'status': snapshot.val()[userId]['status'],\r\n                    'time': snapshot.val()[userId]['time']\r\n                });\r\n                if (!isNewEnqueue){\r\n                    let isOldEnqueue = false;\r\n                    oldClientQueue.forEach((client)=>{\r\n                        if (client.innerHTML === userId) isOldEnqueue = true;\r\n                    });\r\n                    isNewEnqueue = (!isOldEnqueue);\r\n                }\r\n            }\r\n            for (let i=0; i<tmpClientQueue.length; i++){\r\n                for (let j=0; j<tmpClientQueue.length - i - 1; j++){\r\n                    if (tmpClientQueue[j]['time']>tmpClientQueue[j+1]['time']){\r\n                        let tmp = tmpClientQueue[j];\r\n                        tmpClientQueue[j] = tmpClientQueue[j+1];\r\n                        tmpClientQueue[j+1] = tmp;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isNewEnqueue){\r\n            let audio = new Audio(newClientSound);\r\n            audio.play();\r\n        }\r\n        console.log(tmpClientQueue);\r\n        setClientQueue(tmpClientQueue);\r\n    }\r\n\r\n    //Callback for handling disconnect/reconnect changes\r\n    const handleConnectionChanges = (snapshot)=>{\r\n        setDisconnectTime(snapshot.val());\r\n    };\r\n\r\n    //Callback for handling typing status changes\r\n    const handleTypingStatusChanges = (snapshot)=>{\r\n        setIsClientTyping(snapshot.val());\r\n    }\r\n\r\n    //Function for setting up chatroom database listeners \r\n    const setupChatroomListener = async ()=>{\r\n        try{\r\n            queueRef.orderByChild('time').on('value', handleQueueChanges);\r\n            chatroomRef.orderByChild('time').on('value', handleChatLogChanges);\r\n            let localCurrentClient = sessionStorage.getItem('heartlinehk-currentClient');\r\n            let assignedSnapshot = await assignedRef.once('value');\r\n            for (let clientId in assignedSnapshot.val()){\r\n                if (assignedSnapshot.val()[clientId] === props.currentUser.uid){\r\n                    if (localCurrentClient !== null && localCurrentClient !== clientId) console.warn(\"WARNING: updating local current client as it is different from database!\");\r\n                    localCurrentClient = clientId;\r\n                    break;\r\n                }\r\n            }\r\n            if (localCurrentClient != null){\r\n                disconnectRef.child(localCurrentClient).on('value', handleConnectionChanges);\r\n                typingRef.child(localCurrentClient).on('value', handleTypingStatusChanges);\r\n                setCurrentClient(localCurrentClient);\r\n                sessionStorage.setItem('heartlinehk-currentClient', localCurrentClient);\r\n            }else console.warn(\"WARNING: No client is assigned to the current volunteer!\");\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n        }\r\n\r\n    };\r\n\r\n    //Function for initiating a new chat\r\n    const startNewChat = async (e)=>{\r\n        //Progress variable indicates the progress of the start-chat function\r\n        //This can be used to reset everything done if an error has occurred\r\n        let progress = 0;\r\n        //Temp target client ID\r\n        let tmpCurrentClient = null;\r\n        //Temp target client's time-of-arrival in queue\r\n        let tmpInQueueTime = null;\r\n        try{\r\n            //Check if a new chat is already starting\r\n            if (isStartingChat) throw new Error(\"Already starting a new chat!\");\r\n            setIsStartingChat(true);\r\n\r\n            //Check if all database references are available\r\n            if (!queueRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Chat Queue reference not available!\");\r\n            }else if (!assignedRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Room Assigned reference not available!\");\r\n            }else if (!chatroomRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Chat Room reference not available!\");\r\n            }else if (!disconnectRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Disconnect Time reference not available!\");\r\n            }else if (!typingRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Typing Status reference not available!\");\r\n            }\r\n            //Check if current client is already set\r\n            else if (currentClient != null){\r\n                setIsStartingChat(false);\r\n                throw new Error(\"CurrentClient is already set!\");\r\n            }else{\r\n                //Get the target client\r\n                let snapshot = await queueRef.orderByChild('time').once('value');\r\n                let tmpClientQueue = [];\r\n                if (snapshot.val() != null){\r\n                    for (let userId in snapshot.val()){\r\n                        tmpClientQueue.push({\r\n                            'userId': userId,\r\n                            'status': snapshot.val()[userId]['status'],\r\n                            'time': snapshot.val()[userId]['time']\r\n                        });\r\n                    }\r\n                    for (let i=0; i<tmpClientQueue.length; i++){\r\n                        for (let j=0; j<tmpClientQueue.length - i - 1; j++){\r\n                            if (tmpClientQueue[j]['time']>tmpClientQueue[j+1]['time']){\r\n                                let tmp = tmpClientQueue[j];\r\n                                tmpClientQueue[j] = tmpClientQueue[j+1];\r\n                                tmpClientQueue[j+1] = tmp;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (let i in tmpClientQueue){\r\n                    if (tmpClientQueue[i]['status'] === \"inQueue\"){\r\n                        tmpCurrentClient = tmpClientQueue[i]['userId'];\r\n                        tmpInQueueTime = tmpClientQueue[i]['time'];\r\n                        break;\r\n                    }\r\n                }\r\n                if (tmpCurrentClient === null){\r\n                    setIsStartingChat(false);\r\n                    throw new RangeError(\"No available client in chat queue!\");\r\n                }\r\n\r\n                //Set target client queue status to \"roomAssigned\"\r\n                //This is to prevent multiple volunteers dequeueing the same client\r\n                let queueClientRef = queueRef.child(tmpCurrentClient);\r\n                let queueClientTransaction = await queueClientRef.transaction((queueClient)=>{\r\n                    if (queueClient === null){\r\n                        console.error(\"ERROR: Required Queue Client is Null!\");\r\n                        return;\r\n                    }else if (queueClient['status'] === 'roomAssigned'){\r\n                        console.error(\"ERROR: Required Queue Client has already assigned a room!\");\r\n                        return;\r\n                    }else if (queueClient['status'] === 'inQueue'){\r\n                        return ({\r\n                            'status': \"roomAssigned\",\r\n                            'time': firebase.database.ServerValue.TIMESTAMP\r\n                        });\r\n                    }else{\r\n                        console.error(\"Unknown Error!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (queueClientTransaction.error){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(queueClientTransaction.error);\r\n                } else if (!queueClientTransaction.committed){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(\"Client Queue Transaction Aborted!\");\r\n                }\r\n                progress += 1;\r\n\r\n                //Set the assigned room of the client to current volunteer ID\r\n                let assignedClientRef = assignedRef.child(tmpCurrentClient);\r\n                let assignedClientTransaction = await assignedClientRef.transaction((assignedClient)=>{\r\n                    if (assignedClient === null){\r\n                        return props.currentUser.uid;\r\n                    }else{\r\n                        console.error(\"ERROR: Client to be assigned has a non-null volunteer ID!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (assignedClientTransaction.error){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(assignedClientTransaction.error);\r\n                }else if (!assignedClientTransaction.committed){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(\"Client Room Assigned Transaction Aborted!\");\r\n                }\r\n                progress += 1;\r\n\r\n                //If Chatroom is not empty, remove all previous messages\r\n                let tmpChatLog = (await chatroomRef.once('value')).val();\r\n                if (tmpChatLog != null) await chatroomRef.remove();\r\n                progress += 1;\r\n\r\n                //Send an initial message to the chat\r\n                let initialMessageRef = await chatroomRef.push();\r\n                let initialMessageTransaction = await initialMessageRef.transaction((initialMessage)=>{\r\n                    if (initialMessage === null){\r\n                        return {\r\n                            'uid': props.currentUser.uid,\r\n                            'time': firebase.database.ServerValue.TIMESTAMP,\r\n                            'spc': tmpCurrentClient\r\n                        };\r\n                    }else{\r\n                        console.error(\"ERROR: Initial Message is not null!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (initialMessageTransaction.error){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(initialMessageTransaction.error);\r\n                }else if (!initialMessageTransaction.committed){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(\"Initial Message Transaction Aborted!\");\r\n                }\r\n                progress += 1;\r\n\r\n                //Set current client\r\n                sessionStorage.setItem('heartlinehk-currentClient', tmpCurrentClient);\r\n                setCurrentClient(tmpCurrentClient);\r\n\r\n                //Subscribe to current client's disconnect time and typing status\r\n                disconnectRef.child(tmpCurrentClient).on('value', handleConnectionChanges);\r\n                typingRef.child(tmpCurrentClient).on('value', handleTypingStatusChanges);\r\n\r\n                //End of procedure of starting a new chat\r\n                setIsStartingChat(false);\r\n            }\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            //Resets all finished progress\r\n            if (progress >= 1) await queueRef.child(tmpCurrentClient).set({\r\n                'status': \"inQueue\",\r\n                \"time\": tmpInQueueTime\r\n            });\r\n            if (progress >= 2) await assignedRef.child(tmpCurrentClient).remove();\r\n            //If the step fails at this stage, \r\n            //meaning all the works on database are done.\r\n            //So no resetting is needed. \r\n            if (progress >= 4){\r\n                sessionStorage.setItem('heartlinehk-currentClient', tmpCurrentClient);\r\n                setCurrentClient(tmpCurrentClient);\r\n                setIsStartingChat(false);\r\n            }\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    //Function for ending a continuing chat\r\n    const endChat = async () =>{\r\n        //Progress variable indicates the progress of the start-chat function\r\n        //This can be used to reset everything done if an error has occurred\r\n        let progress = 0;\r\n        //Flag indicating if the client has left or not\r\n        let isClientLeft = false;\r\n        //Start and End Chat Time in milliseconds\r\n        let startChatMsec = 0;\r\n        let endChatMsec = 0;\r\n        try{\r\n            //Check if a chat is already ending\r\n            if (isEndingChat) throw new Error(\"Already ending a chat!\");\r\n            setIsEndingChat(true);\r\n\r\n            //Check if all database references are available\r\n            if (!assignedRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Room Assigned reference not available!\");\r\n            }else if (!chatroomRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Chat Room reference not available!\");\r\n            }else if (!disconnectRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Disconnect Time reference not available!\");\r\n            }else if (!typingRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Typing Status reference not available!\");\r\n            }\r\n            //Check if current client is null or not\r\n            else if (currentClient == null){\r\n                setIsEndingChat(false);\r\n                throw new Error(\"Current Client is null!\");\r\n            }else{\r\n                //Check if current client has left\r\n                //The client has left when either the room assigned is null\r\n                let snapshot = await assignedRef.child(currentClient).once('value');\r\n                let isRoomAssignedNull = (snapshot.val() === null);\r\n                //or the chat log has a special message of \"clientLeft\"\r\n                let tmpChatLog = (await chatroomRef.once('value')).val();\r\n                let isSpecialMessage  = false; \r\n                if (tmpChatLog != null){\r\n                    for (let chatId in tmpChatLog){\r\n                        if (tmpChatLog[chatId]['spc'] === \"clientLeft\"){\r\n                            isSpecialMessage = true;\r\n                            break;\r\n                        } \r\n                    }\r\n                }\r\n                //Also check if the client is still in queue(i.e. never accept the chat)\r\n                let isClientInQueue = ((await queueRef.child(currentClient).once('value')).val() != null);\r\n                console.log(isRoomAssignedNull, isSpecialMessage, isClientInQueue);\r\n                isClientLeft = (isRoomAssignedNull || isSpecialMessage);\r\n                progress += 1;\r\n\r\n                //If client hasn't left, set the room assigned to \"volunLeft\"\r\n                if (!isClientLeft){\r\n                    if (!isRoomAssignedNull) await assignedRef.child(currentClient).set(\"volunLeft\");\r\n                    if (isClientInQueue) await queueRef.child(currentClient).remove();\r\n                }\r\n                progress += 1;\r\n\r\n                //Get the start and end time of the chat\r\n                let initialChatMessage = (await chatroomRef.orderByChild('time').limitToFirst(1).once('value')).val();\r\n                for (let chatId in initialChatMessage) startChatMsec = initialChatMessage[chatId]['time'];\r\n                endChatMsec = Date.now();\r\n\r\n                //Delete the chat log\r\n                let chatroomTransaction = await chatroomRef.transaction((chatLog)=>{\r\n                    if (chatLog != null){\r\n                        return null;\r\n                    }else{\r\n                        console.error(\"ERROR: Chat Log in Chatroom already null!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (chatroomTransaction.error){\r\n                    setIsEndingChat(false);\r\n                    throw new Error(chatroomTransaction.error);\r\n                }else if (!chatroomTransaction.committed){\r\n                    setIsEndingChat(false);\r\n                    throw new Error(\"Chatrom Transaction Aborted!\");\r\n                }\r\n                setChatLog([]);\r\n                progress += 1;\r\n\r\n                //Remove Typing Status\r\n                await typingRef.child(props.currentUser.uid).remove();\r\n\r\n                //Unsubscribe to current client's disconnect time and typing status\r\n                disconnectRef.child(currentClient).off('value');\r\n                setDisconnectTime(null);\r\n                typingRef.child(currentClient).off('value');\r\n                setIsClientTyping(false);\r\n\r\n                //Reset current client\r\n                sessionStorage.removeItem('heartlinehk-currentClient');\r\n                setCurrentClient(null);\r\n                \r\n                //End of procedure of ending a chat\r\n                setIsEndingChat(false);\r\n\r\n                //Open popup window for chat record form\r\n                let startChatTime = new Date(startChatMsec);\r\n                const startChatHour = (startChatTime.getHours()<10?\"0\"+startChatTime.getHours().toString():startChatTime.getHours().toString());\r\n                const startChatMinutes = (startChatTime.getMinutes()<10?\"0\"+startChatTime.getMinutes().toString():startChatTime.getMinutes().toString());\r\n                let endChatTime = new Date(endChatMsec);\r\n                const endChatHour = (endChatTime.getHours()<10?\"0\"+endChatTime.getHours().toString():endChatTime.getHours().toString());\r\n                const endChatMinutes = (endChatTime.getMinutes()<10?\"0\"+endChatTime.getMinutes().toString():endChatTime.getMinutes().toString());\r\n                const currentMonth = (endChatTime.getMonth()+1<10?\"0\"+(endChatTime.getMonth()+1).toString():(endChatTime.getMonth()+1).toString());\r\n                const currentDay = (endChatTime.getDate()<10?\"0\"+endChatTime.getDate().toString():endChatTime.getDate().toString());\r\n                const prefilledRecordFormUrl = recordFormUrl+'&'+recordFormEntries['date']+'='+endChatTime.getFullYear()+'-'+currentMonth+'-'+currentDay+'&'+recordFormEntries['startTime']+'='+startChatHour+\":\"+startChatMinutes+'&'+recordFormEntries['endTime']+'='+endChatHour+\":\"+endChatMinutes;\r\n                let popupWindowRef = window.open(prefilledRecordFormUrl, \"ChatRecordForm\", 'resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no,status=yes');\r\n                \r\n            }\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            if (progress >= 2){\r\n                if (!isClientLeft) await assignedRef.child(currentClient).set(props.currentUser.uid);\r\n            } \r\n            //If the step fails at this stage, \r\n            //meaning all the works on database are done.\r\n            //So no resetting is needed. \r\n            if (progress >= 3){\r\n                disconnectRef.child(currentClient).off('value');\r\n                setDisconnectTime(null);\r\n                typingRef.child(currentClient).off('value');\r\n                setIsClientTyping(false);\r\n\r\n                sessionStorage.removeItem('heartlinehk-currentClient');\r\n                setCurrentClient(null);\r\n\r\n                let startChatTime = new Date(startChatMsec);\r\n                const startChatHour = (startChatTime.getHours()<10?\"0\"+startChatTime.getHours().toString():startChatTime.getHours().toString());\r\n                const startChatMinutes = (startChatTime.getMinutes()<10?\"0\"+startChatTime.getMinutes().toString():startChatTime.getMinutes().toString());\r\n                let endChatTime = new Date(endChatMsec);\r\n                const endChatHour = (endChatTime.getHours()<10?\"0\"+endChatTime.getHours().toString():endChatTime.getHours().toString());\r\n                const endChatMinutes = (endChatTime.getMinutes()<10?\"0\"+endChatTime.getMinutes().toString():endChatTime.getMinutes().toString());\r\n                const currentMonth = (endChatTime.getMonth()+1<10?\"0\"+(endChatTime.getMonth()+1).toString():(endChatTime.getMonth()+1).toString());\r\n                const currentDay = (endChatTime.getDate()<10?\"0\"+endChatTime.getDate().toString():endChatTime.getDate().toString());\r\n                const prefilledRecordFormUrl = recordFormUrl+'&'+recordFormEntries['date']+'='+endChatTime.getFullYear()+'-'+currentMonth+'-'+currentDay+'&'+recordFormEntries['startTime']+'='+startChatHour+\":\"+startChatMinutes+'&'+recordFormEntries['endTime']+'='+endChatHour+\":\"+endChatMinutes;\r\n                let popupWindowRef = window.open(prefilledRecordFormUrl, \"ChatRecordForm\", 'resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no,status=yes');\r\n            }\r\n            alert(error.message);\r\n        }\r\n\r\n    }\r\n\r\n    //Function for sending chat message\r\n    const sendChatMessage = async (e)=>{\r\n        e.preventDefault();\r\n        try{\r\n            //Check if a message is already sending\r\n            if (isSendingMessage) throw new Error(\"Already sending a message!\");\r\n            setIsSendingMessage(true);\r\n\r\n            //Check if a chat is ongoing\r\n            if (currentClient === null){\r\n                setIsSendingMessage(false);\r\n                throw new Error(\"Current Client is null!\");\r\n            }\r\n            //Check if the message to be sent is empty\r\n            let messageToBeSent = document.getElementById('msg-input').value;\r\n            if (messageToBeSent === null || messageToBeSent === \"\"){\r\n                setIsSendingMessage(false);\r\n                throw new Error(\"Message to be sent is empty!\");\r\n            }else if (!chatroomRef){\r\n                setIsSendingMessage(false);\r\n                throw new ReferenceError(\"Chatroom reference not available!\");\r\n            }else if (!typingRef){\r\n                setIsSendingMessage(false);\r\n                throw new ReferenceError(\"Typing Status reference not available!\");\r\n            }else{\r\n                //Send the message to chatroom\r\n                let newMessageRef = await chatroomRef.push();\r\n                let newMessageTransaction = await newMessageRef.transaction((newMessage)=>{\r\n                    if (newMessage === null){\r\n                        return {\r\n                            'uid': props.currentUser.uid,\r\n                            'time': firebase.database.ServerValue.TIMESTAMP,\r\n                            'msg': messageToBeSent\r\n                        };\r\n                    }else{\r\n                        console.error(\"ERROR: New Message is not null!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (newMessageTransaction.error){\r\n                    setIsSendingMessage(false);\r\n                    throw new Error(newMessageTransaction.error);\r\n                }else if (!newMessageTransaction.committed){\r\n                    setIsSendingMessage(false);\r\n                    throw new Error(\"New Message Transaction Aborted!\");\r\n                }\r\n\r\n                //Rese the typing status\r\n                setIsUserTyping(false);\r\n                await typingRef.child(props.currentUser.uid).set(false);\r\n\r\n                //Clear the message input\r\n                document.getElementById('msg-input').value = \"\";\r\n                console.log(\"Message sent!\");\r\n\r\n                setIsSendingMessage(false);\r\n            }\r\n        }catch (error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            alert(error.message);\r\n        }\r\n    };\r\n\r\n    //Function for changing the typing status of current user on database\r\n    const changeTypingStatus = (e)=>{\r\n        if (currentClient){\r\n            const currentlyTyping = (e.target.value != \"\");\r\n            if (currentlyTyping != isUserTyping){\r\n                if (typingRef){\r\n                    setIsUserTyping(currentlyTyping);\r\n                    typingRef.child(props.currentUser.uid).set(currentlyTyping);\r\n                }else console.error(\"ERROR: Typing Status reference not available!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //Callback for handling the form submission of end chat confirmation modal\r\n    const endChatFormHandler = (e)=>{\r\n        e.preventDefault();\r\n        const modalContainerDiv = e.target.parentElement.parentElement;\r\n        if (modalContainerDiv.id === \"endchat-modal\"){\r\n            const isConfirmed = (e.target.className === \"confirm-btn\");\r\n            if (isConfirmed) endChat();\r\n            modalContainerDiv.classList.remove(\"opened\");\r\n        }else console.error(\"ERROR: Parent Element is not an end chat modal!\");\r\n    }\r\n\r\n    //Callback for handling the form submission of start chat confirmation modal\r\n    const startChatFormHandler = (e)=>{\r\n        e.preventDefault();\r\n        const modalContainerDiv = e.target.parentElement.parentElement;\r\n        if (modalContainerDiv.id === \"startchat-modal\"){\r\n            const isConfirmed = (e.target.className === \"confirm-btn\");\r\n            if (isConfirmed){\r\n                toggleQueue();\r\n                startNewChat();\r\n            }\r\n            modalContainerDiv.classList.remove(\"opened\");\r\n        }else console.error(\"ERROR: Parent Element is not a start chat modal!\");\r\n    }\r\n\r\n    //Callback for handling selection of emoji in the emoji picker\r\n    const emojiPickerHandler = (e, emojiObject)=>{\r\n        console.log(emojiObject.emoji);\r\n        const msgInput = document.querySelector(\".chatroom .chat-container .input-container #msg-input\");\r\n        let originalMsgStart = msgInput.value.substring(0, msgInput.selectionStart);\r\n        let originalMsgEnd = msgInput.value.substring(msgInput.selectionEnd, msgInput.value.length);\r\n        if (msgInput.selectionStart === 0 && msgInput.selectionEnd === 0){\r\n            originalMsgStart = msgInput.value;\r\n            originalMsgEnd = \"\";\r\n        }\r\n        msgInput.value = originalMsgStart + emojiObject.emoji + originalMsgEnd;\r\n        msgInput.focus();\r\n        msgInput.setSelectionRange(originalMsgStart.length+2, originalMsgStart.length+2);\r\n\r\n    }\r\n\r\n    //Callback for handling selection of special chinese character\r\n    const specialCharHandler = (e)=>{\r\n        const specialChar = e.target.innerHTML;\r\n        console.log(specialChar);\r\n        const msgInput = document.querySelector(\".chatroom .chat-container .input-container #msg-input\");\r\n        let originalMsgStart = msgInput.value.substring(0, msgInput.selectionStart);\r\n        let originalMsgEnd = msgInput.value.substring(msgInput.selectionEnd, msgInput.value.length);\r\n        if (msgInput.selectionStart === 0 && msgInput.selectionEnd === 0){\r\n            originalMsgStart = msgInput.value;\r\n            originalMsgEnd = \"\";\r\n        }\r\n        msgInput.value = originalMsgStart + specialChar + originalMsgEnd;\r\n        msgInput.focus();\r\n        msgInput.setSelectionRange(originalMsgStart.length+1, originalMsgStart.length+1);\r\n    }\r\n\r\n    //Function for toggling between Queue and Chat on screen (in smaller screen devices)\r\n    const toggleQueue = ()=>{\r\n        if (isQueueOpened) setIsQueueOpened(false);\r\n        else setIsQueueOpened(true);\r\n        document.querySelector('.chatroom').classList.toggle(\"queue-opened\");\r\n\r\n    }\r\n\r\n    //Function for toggling the emoji picker\r\n    const toggleEmojiPicker = ()=>{\r\n        if (isPickerOpened) setIsPickerOpened(false);\r\n        else setIsPickerOpened(true);\r\n    }\r\n\r\n    //Function for side-scrolling the special chinese character container\r\n    const scrollSpecialChar = (e)=>{\r\n        const rem = parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n        const spcCharDiv = document.querySelector('.chatroom .chat-container .special-char-container');\r\n        const arrowButton = (e.target.className === \"material-icons\"?(e.target.innerHTML === \"arrow_back_ios\"?\"back-arrow\":\"forward-arrow\"):e.target.className);\r\n        if (arrowButton === \"back-arrow\") spcCharDiv.scrollBy(-(1.3 * rem + 12), 0);\r\n        else if (arrowButton === \"forward-arrow\") spcCharDiv.scrollBy((1.3 * rem + 12), 0);\r\n    }\r\n\r\n    const getFormattedDateString = (msec) =>{\r\n        let targetDate = new Date(msec);\r\n        let hourString = (targetDate.getHours()<10?\"0\"+targetDate.getHours().toString():targetDate.getHours().toString());\r\n        let minuteString = (targetDate.getMinutes()<10?\"0\"+targetDate.getMinutes().toString():targetDate.getMinutes().toString());\r\n        let monthString = (targetDate.getMonth()<9?\"0\"+(targetDate.getMonth()+1).toString():(targetDate.getMonth()+1).toString());\r\n        let dayString = (targetDate.getDate()<10?\"0\"+targetDate.getDate().toString():targetDate.getDate().toString());\r\n\r\n        return (hourString+\":\"+minuteString+\", \"+dayString+\"/\"+monthString);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        console.log(\"Chatroom mounted!\");\r\n        setupChatroomListener();\r\n\r\n        return ()=>{\r\n            //Unsubscribe events when unmount component\r\n            console.log(\"Chatroom Unmounted!\");\r\n            let localCurrentClient = sessionStorage.getItem('heartlinehk-currentClient');\r\n            queueRef.orderByChild('time').off('value');\r\n            chatroomRef.orderByChild('time').off('value');\r\n            if (localCurrentClient){\r\n                disconnectRef.child(localCurrentClient).off('value');\r\n                typingRef.child(localCurrentClient).off('value');\r\n                sessionStorage.removeItem('heartlinehk-currentClient');\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if (chatLog.length > 0){\r\n            messageContainerDiv.current.scrollTo(0, messageContainerDiv.current.scrollHeight);\r\n        }\r\n    }, [chatLog]);\r\n\r\n    return (\r\n        <div className=\"chatroom\">\r\n            <ConfirmModal modalId={\"endchat-modal\"} confirmText={\"你確定要結束對話嗎？\"} formSubmitHandler={endChatFormHandler}></ConfirmModal>\r\n            <ConfirmModal modalId={\"startchat-modal\"} confirmText={\"你確定要開啟新對話嗎？\"} formSubmitHandler={startChatFormHandler}></ConfirmModal>\r\n            {(isStartingChat || isEndingChat) && <Loading></Loading>}\r\n            <div className=\"chat-container\">\r\n                {disconnectTime != null &&\r\n                    <p className=\"disconnect-msg\">使用者已於{getFormattedDateString(disconnectTime)}開始離線。</p>\r\n                }\r\n                <div ref={messageContainerDiv} className=\"messages-container\">\r\n                    {chatLog.map((val, idx)=>{\r\n                        return(\r\n                            <p key={val['chatId']} className={\"message \"+(val['spc']?\"special\":(val['uid'] === props.currentUser.uid?\"right\":\"left\"))}>\r\n                                {(val['msg']?val['msg']:(specialChatMessages[val['spc']]?specialChatMessages[val['spc']]:specialChatMessages['clientId']))}\r\n                                <span>{getFormattedDateString(val['time'])}</span>\r\n                            </p>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className=\"special-char-container\">\r\n                    <button className=\"back-arrow\" onClick={scrollSpecialChar}><span className=\"material-icons\">arrow_back_ios</span></button>\r\n                    {specialChineseChars.map((char, idx)=>{\r\n                        return (\r\n                            <button key={\"spc-char\"+idx} className=\"spc-char\" onClick={specialCharHandler}>{char}</button>\r\n                        );\r\n                    })}\r\n                    <button className=\"forward-arrow\" onClick={scrollSpecialChar}><span className=\"material-icons\">arrow_forward_ios</span></button>\r\n                </div>\r\n                <form className=\"input-container\" onSubmit={sendChatMessage}>\r\n                    {isClientTyping && \r\n                        <p className=\"typing-msg\">使用者正在輸入...</p>\r\n                    }\r\n                    <button type=\"button\" name=\"emoji-btn\" id=\"emoji-btn\" onClick={toggleEmojiPicker}><span className=\"material-icons\">emoji_emotions</span></button>\r\n                    <input type=\"text\" name=\"msg-input\" id=\"msg-input\" placeholder=\"按此對話…\" onInput={changeTypingStatus}/>\r\n                    <button type=\"submit\" name=\"submit-btn\" id=\"submit-btn\"><span className=\"material-icons\">send</span></button>\r\n                </form>\r\n                \r\n                {isPickerOpened && <Picker onEmojiClick={emojiPickerHandler}></Picker>}\r\n            </div>\r\n            <div className=\"queue-container\">\r\n                <p className=\"main-text\"><span className=\"material-icons\">people</span><span className=\"queue-count\">{clientQueue.length}</span></p>\r\n                <div ref={clientContainerDiv} className=\"clients-container\">\r\n                    {clientQueue.map((val, idx)=>{\r\n                        return (\r\n                            <p key={val['userId']} className={\"queue-client\"+(val['status'] === \"roomAssigned\"?\" assigned\":\"\")}>\r\n                                Client <span className=\"client-id\">{val['userId']}</span>\r\n                                <span className=\"enqueue-time\" data-time={val[\"time\"]}>{(val[\"status\"] === \"roomAssigned\"?\"被接收\":\"入隊\")}時間: {getFormattedDateString(val['time'])}</span>\r\n                            </p>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                    <button type=\"submit\" name=\"start-btn\" id=\"start-btn\" disabled={currentClient != null || clientQueue.length <= 0} onClick={()=>{document.getElementById(\"startchat-modal\").classList.add(\"opened\")}}>開始對話</button>\r\n                    <button type=\"submit\" name=\"end-btn\" id=\"end-btn\" disabled={currentClient == null} onClick={()=>{document.getElementById(\"endchat-modal\").classList.add(\"opened\")}}>結束對話</button>\r\n                </div>\r\n            </div>\r\n            <button className=\"queue-toggle\" onClick={toggleQueue}><span className=\"material-icons\">{(isQueueOpened?\"chat\":\"contacts\")}</span></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chatroom;","import \"../styles/Dashboard.css\";\r\n\r\nconst Dashboard = () =>{\r\n    return(\r\n        <div className=\"dashboard\">\r\n            <h1>WORK IN PROGRESS</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import \"../styles/Login.css\";\r\n\r\nconst Login = (props) =>{\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <h1 className=\"main-text\">HeartlineHK Login</h1>\r\n            <form className=\"login-form\" onSubmit={props.handleLogin}>\r\n                <label htmlFor=\"login-email\">Email:</label>\r\n                <input type=\"email\" name=\"login-email\" id=\"login-email\" required />\r\n                <label htmlFor=\"login-pwd\">Password:</label>\r\n                <input type=\"password\" name=\"login-password\" id=\"login-password\" required />\r\n                <input type=\"submit\" value=\"Login\" name=\"login-submit\" id=\"login-submit\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ConfirmModal from \"./components/ConfirmModal.js\";\nimport NavBar from \"./components/NavBar.js\";\nimport ProfileUpdate from \"./pages/ProfileUpdate.js\";\nimport Supervisor from \"./pages/Supervisor.js\";\nimport Chatroom from \"./pages/Chatroom.js\";\nimport Dashboard from \"./pages/Dashboard.js\";\nimport Login from \"./pages/Login.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nfunction App() {\n\n  const onlineTimeRef = firebase.database().ref('online_time');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [auth, setAuth] = useState(firebase.auth());\n\n  const handleLogin = async (e) =>{\n    e.preventDefault();\n    if (!isLoggingIn){\n        setIsLoggingIn(true);\n        let currentEmail = document.getElementById('login-email').value;\n        let currentPassword = document.getElementById('login-password').value;\n        try{\n          await auth.setPersistence(firebase.auth.Auth.Persistence.SESSION);\n          await auth.signInWithEmailAndPassword(currentEmail, currentPassword);\n          console.log(auth.currentUser);\n  \n          //const onlineTime = (await onlineTimeRef.child(auth.currentUser.uid).once('value')).val();\n          //if (onlineTime != null){\n          //  await handleLogout();\n          //  throw new Error(\"User already signed in elsewhere\");\n          //}else{\n          //  await onlineTimeRef.child(auth.currentUser.uid).set(firebase.database.ServerValue.TIMESTAMP);\n\n          //}\n        }catch (error){\n          console.error(error.message);\n          alert(error.message);\n        }\n        setIsLoggingIn(false);\n    }else{\n      console.error(\"Already logging in\");\n      alert(\"Already logging in!\");\n    }\n  }\n\n  const handleLogout = async (e) =>{\n    try{\n      await auth.signOut();\n      console.log(\"Signed out!\");\n    }catch(error){\n      console.error(error.message);\n      alert(error.message);\n    }\n  }\n\n  //Callback for handling the form submission of logout confirmation modal\n  const logoutFormHandler = (e)=>{\n    e.preventDefault();\n    const modalContainerDiv = e.target.parentElement.parentElement;\n    if (modalContainerDiv.id === \"logout-modal\"){\n        const isConfirmed = (e.target.className === \"confirm-btn\");\n        if (isConfirmed) handleLogout();\n        modalContainerDiv.classList.remove(\"opened\");\n    }else console.error(\"ERROR: Parent Element is not a logout modal!\");\n  }\n\n  useEffect(()=>{\n    const authChangeListener = firebase.auth().onAuthStateChanged((user)=>{\n      if (user) setCurrentUser(user);\n      else setCurrentUser(null);\n    });\n    return authChangeListener;\n  });\n\n  return (\n    <Router>\n      <div className=\"App\" style={{width: \"100vw\", minHeight: \"100vh\", position: \"relative\", backgroundColor: \"rgba(0,0,0,0.05)\", display: \"flex\", flexDirection:\"row\", overflow: \"hidden\"}}>\n        {!currentUser && <Login handleLogin={handleLogin}/>}\n        {currentUser && \n          <>\n          <ConfirmModal modalId={\"logout-modal\"} confirmText={\"你確定要登出嗎？\"} formSubmitHandler={logoutFormHandler}></ConfirmModal>\n          <NavBar currentUser={currentUser} handleLogout={()=>{document.getElementById(\"logout-modal\").classList.add('opened')}}/>\n          <Switch>\n            <Route exact path=\"/chatroom\">\n              <Chatroom currentUser={currentUser}/>\n            </Route>\n            <Route exact path=\"/supervisor\">\n              <Supervisor currentUser={currentUser}/>\n            </Route>\n            <Route exact path=\"/profile-update\">\n              <ProfileUpdate currentUser={currentUser}/>\n            </Route>\n            <Route path=\"/\">\n              <Dashboard currentUser={currentUser}/>\n            </Route>\n          </Switch>\n          </>\n        }\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD-gB_LHwUq2qiUXdDt2CAxGCYQQla4hMo\",\n  authDomain: \"heartlinehk-8e3ec.firebaseapp.com\",\n  databaseURL: \"https://heartlinehk-8e3ec-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"heartlinehk-8e3ec\",\n  storageBucket: \"heartlinehk-8e3ec.appspot.com\",\n  messagingSenderId: \"1077537941035\",\n  appId: \"1:1077537941035:web:f5b566fde9a2363a2d6c6e\",\n  measurementId: \"G-S9JD41562T\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\n\n//firebase.database().useEmulator(\"localhost\", 9000);\n//firebase.auth().useEmulator(\"http://localhost:9099\");\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}