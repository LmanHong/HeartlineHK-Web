{"version":3,"sources":["components/ConfirmModal.js","components/NoticeModal.js","img/logo/logo_80x80.png","components/NavBar.js","pages/ProfileUpdate.js","pages/Supervisor.js","components/Loading.js","sound/pristine-609.mp3","pages/Chatroom.js","pages/Dashboard.js","pages/Login.js","App.js","index.js"],"names":["ConfirmModal","props","id","modalId","className","confirmText","type","name","onClick","formSubmitHandler","NoticeModal","noticeText","NavBar","menuNav","useRef","navBackgroundDiv","useState","isSupervisor","setIsSupervisor","closeNav","current","style","transitionDuration","classList","remove","useEffect","firebase","database","ref","child","currentUser","uid","once","snapshot","val","add","href","src","logo","alt","to","handleLogout","displayName","ProfileUpdate","displayNameInputRef","handleProfileUpdate","e","a","preventDefault","newDisplayName","value","updateProfile","alert","Error","console","error","message","onSubmit","htmlFor","Supervisor","specialChatMessages","onlineTimeRef","assignedRef","disconnectRef","chatroomRef","messageContainerDiv","disconnectTime","setDisconnectTime","onlineTime","setOnlineTime","chatLog","setChatLog","handleChatLogChanges","tmpChatLog","log","chatId","push","handleOnlineTimeChanges","tmpOnlineTime","volunId","handleConnectionChanges","selectVolun","target","innerHTML","clientId","assignedClient","tmpClientId","localCurrentVolun","sessionStorage","getItem","localCurrentClient","orderByChild","off","setItem","on","Date","now","getFormattedDateString","msec","targetDate","hourString","getHours","toString","minuteString","getMinutes","monthString","getMonth","getDate","removeItem","length","scrollTo","scrollHeight","map","idx","Loading","Chatroom","recordRef","queueRef","typingRef","recordFormUrl","recordFormEntries","clientContainerDiv","clientQueue","setClientQueue","currentClient","setCurrentClient","isStartingChat","setIsStartingChat","isEndingChat","setIsEndingChat","isSendingMessage","setIsSendingMessage","isQueueOpened","setIsQueueOpened","isClientTyping","setIsClientTyping","isUserTyping","setIsUserTyping","isPickerOpened","setIsPickerOpened","handleQueueChanges","tmpClientQueue","isNewEnqueue","oldClientQueue","document","querySelectorAll","userId","isOldEnqueue","forEach","client","i","j","tmp","Audio","newClientSound","play","handleTypingStatusChanges","setupChatroomListener","assignedSnapshot","warn","startNewChat","progress","tmpCurrentClient","tmpInQueueTime","ReferenceError","RangeError","queueClientRef","transaction","queueClient","ServerValue","TIMESTAMP","queueClientTransaction","committed","assignedClientRef","assignedClientTransaction","initialMessageRef","initialMessage","initialMessageTransaction","set","endChat","isClientLeft","startChatMsec","endChatMsec","isRoomAssignedNull","isSpecialMessage","isClientInQueue","limitToFirst","initialChatMessage","chatroomTransaction","currentRecordRef","startChatTime","startChatHour","startChatMinutes","endChatTime","endChatHour","endChatMinutes","currentMonth","currentDay","prefilledRecordFormUrl","getFullYear","window","open","sendChatMessage","messageToBeSent","getElementById","newMessageRef","newMessage","newMessageTransaction","specialCharHandler","specialChar","msgInput","querySelector","originalMsgStart","substring","selectionStart","originalMsgEnd","selectionEnd","focus","setSelectionRange","toggleQueue","toggle","scrollSpecialChar","rem","parseFloat","getComputedStyle","documentElement","fontSize","spcCharDiv","arrowButton","scrollBy","modalContainerDiv","parentElement","char","placeholder","onInput","currentlyTyping","onEmojiClick","emojiObject","emoji","data-time","disabled","Dashboard","Login","handleLogin","required","App","setCurrentUser","isLoggingIn","setIsLoggingIn","auth","currentEmail","currentPassword","setPersistence","Auth","Persistence","SESSION","signInWithEmailAndPassword","generateId","agentUid","isAutoLogout","signOut","tmpId","charType","numOfChar","asciiStart","Math","floor","random","String","fromCharCode","onAuthStateChanged","user","setViewHeight","vh","innerHeight","setProperty","addEventListener","width","minHeight","position","backgroundColor","display","flexDirection","overflow","exact","path","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9377af1f.chunk.js","sourcesContent":["import \"../styles/ConfirmModal.css\";\r\n\r\nconst ConfirmModal = (props)=>{\r\n\r\n    return (\r\n        <div id={(props.modalId?props.modalId:\"default-modal\")} className=\"modal-container\">\r\n            <form className=\"confirm-modal\">\r\n                <p className=\"confirm-text\">{(props.confirmText?props.confirmText:\"Changes might be lost if you leave now. Confirm?\")}</p>\r\n                <button type=\"submit\" name=\"confirm-btn\" className=\"confirm-btn\" onClick={props.formSubmitHandler}>確定</button>\r\n                <button type=\"submit\" name=\"cancel-btn\" className=\"cancel-btn\" onClick={props.formSubmitHandler}>取消</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmModal;","import \"../styles/NoticeModal.css\";\r\n\r\nconst NoticeModal = (props)=>{\r\n\r\n    return (\r\n        <div id={(props.modalId?props.modalId:\"default-modal\")} className=\"modal-container\">\r\n            <form className=\"notice-modal\">\r\n                <p className=\"notice-text\">{(props.noticeText?props.noticeText:\"Default Text for Notice Modal.\")}</p>\r\n                <button type=\"submit\" name=\"confirm-btn\" className=\"confirm-btn\" onClick={props.formSubmitHandler}>確定</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoticeModal;","export default __webpack_public_path__ + \"static/media/logo_80x80.6314ce1a.png\";","import { useRef, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../img/logo/logo_80x80.png\";\r\nimport \"../styles/NavBar.css\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nconst NavBar = (props) =>{\r\n\r\n    const menuNav = useRef();\r\n    const navBackgroundDiv = useRef();\r\n    const [isSupervisor, setIsSupervisor] = useState(false);\r\n\r\n    const openNav = ()=>{\r\n        menuNav.current.style.transitionDuration = \"0.5s\";\r\n        menuNav.current.classList.add(\"opened\");\r\n        navBackgroundDiv.current.classList.add(\"opened\");\r\n    };\r\n\r\n    const closeNav = ()=>{\r\n        menuNav.current.style.transitionDuration = \"0.5s\";\r\n        menuNav.current.classList.remove(\"opened\");\r\n        navBackgroundDiv.current.classList.remove(\"opened\");\r\n    }\r\n\r\n    useEffect(()=>{\r\n        firebase.database().ref('supervisors').child(props.currentUser.uid).once('value', (snapshot)=>{\r\n            if (snapshot.val() != null) setIsSupervisor(true);\r\n            else setIsSupervisor(false);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <button className=\"nav-toggle-btn\" onClick={openNav}><span className=\"material-icons\">menu</span></button>\r\n\r\n        <nav className=\"nav-container\" ref={menuNav}>\r\n            <a href=\"#\" className=\"nav-logo\">\r\n                <img src={logo} alt={logo} className=\"front\" />\r\n                <p className=\"nav-name\">HEARTLINEHK</p>\r\n            </a>\r\n            <ul className=\"nav-items-container\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">home</span> 資訊版面\r\n                    </Link>    \r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/chatroom\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">chat</span> 聊天室\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/profile-update\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">badge</span> 更改個人資料\r\n                    </Link>\r\n                </li>\r\n                {isSupervisor && \r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/supervisor\" className=\"nav-link\" onClick={closeNav}>\r\n                        <span className=\"material-icons\">question_answer</span> 管理員版面\r\n                    </Link>\r\n                </li>\r\n                }\r\n\r\n            </ul>\r\n            <div className=\"nav-user\" onClick={props.handleLogout}>\r\n                <img src=\"https://t4.ftcdn.net/jpg/02/34/61/79/360_F_234617921_p1AGQkGyEl8CSzwuUI74ljn6IZXqMUf2.jpg\" alt=\"\" />\r\n                <a className=\"username\">{props.currentUser.displayName}</a>\r\n            </div>\r\n        </nav>\r\n\r\n        <div ref={navBackgroundDiv} className=\"nav-background\" onClick={closeNav}></div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n\r\n//                \r\n//\r\n//\r\n//","import \"../styles/ProfileUpdate.css\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { useRef } from \"react\";\r\n\r\nconst ProfileUpdate = (props)=>{\r\n\r\n    const displayNameInputRef = useRef();\r\n\r\n    const handleProfileUpdate = async (e)=>{\r\n        e.preventDefault();\r\n        try{\r\n            if (props.currentUser){\r\n                const newDisplayName = displayNameInputRef.current.value;\r\n                if (newDisplayName != \"\"){\r\n                    await props.currentUser.updateProfile({\r\n                        displayName: newDisplayName\r\n                    });\r\n                    displayNameInputRef.current.value = \"\";\r\n                    alert(\"Profile Update Successful!\");\r\n                }else throw new Error(\"New Display Name is null!\");\r\n            }else throw new Error(\"Current User is null!\");\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            alert(error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-update\">\r\n            <form className=\"update-form\" onSubmit={handleProfileUpdate}>\r\n                <label htmlFor=\"display-name-input\">新顯示名稱</label>\r\n                <input ref={displayNameInputRef} type=\"text\" name=\"display-name-input\" id=\"display-name-input\" />\r\n                <button type=\"submit\">更改資料</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileUpdate;","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport \"../styles/Supervisor.css\";\r\n\r\nconst Supervisor = (props)=>{\r\n\r\n    const specialChatMessages = {\r\n        'clientLeft': \"使用者已離開聊天室\",\r\n        'volunLeft': \"義工已離開聊天室\",\r\n        'clientId': \"義工已開啟聊天室\",\r\n        'noChatStarted': \"此義工未有開啟聊天室\"\r\n    }\r\n    //Volunteer Online Time database reference\r\n    const onlineTimeRef = firebase.database().ref('online_time');\r\n    //Room Assigned database reference\r\n    const assignedRef = firebase.database().ref('room_assigned');\r\n    //Disconnect Time database reference\r\n    const disconnectRef = firebase.database().ref('disconnect_time');   \r\n    //Chatroom database reference\r\n    const chatroomRef = firebase.database().ref('chat_log');\r\n    //Refernce of the Message container div \r\n    const messageContainerDiv = useRef(null);\r\n    //Disconnect time of current client\r\n    const [disconnectTime, setDisconnectTime] = useState(null);\r\n    //Online Time local list copy\r\n    const [onlineTime, setOnlineTime] = useState([]);\r\n    //Chat Log local list copy\r\n    const [chatLog, setChatLog] = useState([]);\r\n    //Flag indicating the current user is supervisor\r\n    const [isSupervisor, setIsSupervisor] = useState(false);\r\n\r\n\r\n    //Callback for handling new chat messages\r\n    const handleChatLogChanges = (snapshot)=>{\r\n        let tmpChatLog = [];\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (const chatId in snapshot.val()) tmpChatLog.push({\r\n                'chatId': chatId,\r\n                'uid': snapshot.val()[chatId]['uid'],\r\n                'time': snapshot.val()[chatId]['time'],\r\n                'msg': snapshot.val()[chatId]['msg'],\r\n                'spc': snapshot.val()[chatId]['spc']\r\n            });\r\n        }\r\n        console.log(tmpChatLog);\r\n        setChatLog(tmpChatLog);\r\n    };\r\n\r\n    //Callback for handling online time changes\r\n    const handleOnlineTimeChanges = (snapshot)=>{\r\n        let tmpOnlineTime = [];\r\n        if (snapshot.val() != null){\r\n            for (const volunId in snapshot.val()) tmpOnlineTime.push(volunId);\r\n        }\r\n        console.log(tmpOnlineTime);\r\n        setOnlineTime(tmpOnlineTime);\r\n    }\r\n\r\n    //Callback for handling disconnect/reconnect changes\r\n    const handleConnectionChanges = (snapshot)=>{\r\n        setDisconnectTime(snapshot.val());\r\n    };\r\n\r\n    //Function for handling the selection of volunteer\r\n    const selectVolun = async (e)=>{\r\n        const volunId = e.target.innerHTML;\r\n        let clientId = null;\r\n        let assignedClient = (await assignedRef.once('value')).val();\r\n        for (const tmpClientId in assignedClient){\r\n            if (assignedClient[tmpClientId] === volunId){\r\n                clientId = tmpClientId;\r\n                break;\r\n            }\r\n        }\r\n        console.log(volunId);\r\n        console.log(clientId);\r\n\r\n        const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n        const localCurrentClient = sessionStorage.getItem('heartlinehk-supervisor-currentClient');\r\n        if (localCurrentVolun) chatroomRef.child(localCurrentVolun).orderByChild('time').off('value');\r\n        if (localCurrentClient) disconnectRef.child(localCurrentClient).off('value'); \r\n        \r\n        sessionStorage.setItem('heartlinehk-supervisor-currentVolun', volunId);\r\n        sessionStorage.setItem('heartlinehk-supervisor-currentClient', clientId);\r\n        if (clientId != null){\r\n            chatroomRef.child(volunId).orderByChild('time').on('value', handleChatLogChanges);\r\n            disconnectRef.child(clientId).on('value', handleConnectionChanges);\r\n        }else setChatLog([{\r\n            'chatId': \"nochatstarted\",\r\n            'uid': volunId,\r\n            'time': Date.now(),\r\n            'spc': \"noChatStarted\"\r\n        }]);\r\n    }\r\n\r\n    const getFormattedDateString = (msec) =>{\r\n        let targetDate = new Date(msec);\r\n        let hourString = (targetDate.getHours()<10?\"0\"+targetDate.getHours().toString():targetDate.getHours().toString());\r\n        let minuteString = (targetDate.getMinutes()<10?\"0\"+targetDate.getMinutes().toString():targetDate.getMinutes().toString());\r\n        let monthString = (targetDate.getMonth()<9?\"0\"+(targetDate.getMonth()+1).toString():(targetDate.getMonth()+1).toString());\r\n        let dayString = (targetDate.getDate()<10?\"0\"+targetDate.getDate().toString():targetDate.getDate().toString());\r\n\r\n        return (hourString+\":\"+minuteString+\", \"+dayString+\"/\"+monthString);\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        firebase.database().ref('supervisors').child(props.currentUser.uid).once('value', (snapshot)=>{\r\n            if (snapshot.val() != null) setIsSupervisor(true);\r\n            else setIsSupervisor(false);\r\n        });\r\n        onlineTimeRef.on('value', handleOnlineTimeChanges);\r\n\r\n\r\n        return()=>{\r\n            //Unsubscribe events when unmount component\r\n            console.log(\"Supervisor Unmounted!\");\r\n            onlineTimeRef.off('value');\r\n            const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n            const localCurrentClient = sessionStorage.getItem('heartlinehk-supervisor-currentClient');\r\n            if (localCurrentVolun){\r\n                chatroomRef.child(localCurrentVolun).orderByChild('time').off('value');\r\n                sessionStorage.removeItem('heartlinehk-supervisor-currentVolun');\r\n            }\r\n            if (localCurrentClient){\r\n                disconnectRef.child(localCurrentClient).off('value');\r\n                sessionStorage.removeItem('heartlinehk-supervisor-currentClient');\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if (chatLog.length > 0){\r\n            messageContainerDiv.current.scrollTo(0, messageContainerDiv.current.scrollHeight);\r\n        }\r\n    }, [chatLog]);\r\n\r\n    return (\r\n        <div className=\"supervisor\">\r\n            <div className=\"volunteers-container\">\r\n                {onlineTime.map((val, idx)=>{\r\n                    const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n                    return (\r\n                        <button key={\"online-volun-\"+idx} className={\"volun-btn\"+(localCurrentVolun === val?\" selected\":\"\")} value={val} onClick={selectVolun}>{val}</button>\r\n                    );\r\n                })}\r\n            </div>\r\n            {disconnectTime != null &&\r\n                <p className=\"disconnect-msg\">使用者已於{getFormattedDateString(disconnectTime)}開始離線。</p>\r\n            }\r\n            <div ref={messageContainerDiv} className=\"chat-container\">\r\n                {chatLog.length > 0 && chatLog.map((val, idx)=>{\r\n                    const localCurrentVolun = sessionStorage.getItem('heartlinehk-supervisor-currentVolun');\r\n                    return(\r\n                        <p key={val['chatId']} className={\"message \"+(val['spc']?\"special\":(val['uid'] === localCurrentVolun?\"right\":\"left\"))}>\r\n                            {(val['msg']?val['msg']:(specialChatMessages[val['spc']]?specialChatMessages[val['spc']]:specialChatMessages['clientId']))}\r\n                            <span>{getFormattedDateString(val['time'])}</span>\r\n                        </p>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Supervisor;","import \"../styles/Loading.css\";\r\n\r\nconst Loading = ()=>{\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"spinning-circle\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;","export default __webpack_public_path__ + \"static/media/pristine-609.9287f5ce.mp3\";","import Loading from \"../components/Loading.js\";\r\nimport ConfirmModal from \"../components/ConfirmModal.js\";\r\nimport Picker from \"emoji-picker-react\";\r\nimport \"../styles/Chatroom.css\";\r\nimport newClientSound from \"../sound/pristine-609.mp3\"\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\nconst Chatroom = (props) =>{\r\n\r\n    const specialChineseChars = ['啲','咁','嗰','咗','喺','係','哋','唔','咩','咪','嘅','㗎','喎','嘢','嚟','囉','乜','叻','呢','啱','睇','諗','噏','嘥','晒','咋','瞓','唞','氹','攰','俾','閂','呀','啦','冧','晏','嬲','喇'];\r\n    const specialChatMessages = {\r\n        'clientLeft': \"使用者已離開聊天室\",\r\n        'volunLeft': \"義工已離開聊天室\",\r\n        'clientId': \"義工已開啟聊天室\"\r\n    }\r\n\r\n    //Chat Records database reference\r\n    const recordRef = firebase.database().ref('chat_records');\r\n    //Chat Queue database reference\r\n    const queueRef = firebase.database().ref('chat_queue');\r\n    //Room Assigned database reference\r\n    const assignedRef = firebase.database().ref('room_assigned');\r\n    //Disconnect Time database reference\r\n    const disconnectRef = firebase.database().ref('disconnect_time');\r\n    //Typing Status database reference\r\n    const typingRef = firebase.database().ref('typing_status');\r\n    //Chatroom database reference\r\n    const chatroomRef = firebase.database().ref(`chat_log/${props.currentUser.uid}`);\r\n    //Chat record Google Form\r\n    const recordFormUrl = \"https://docs.google.com/forms/d/e/1FAIpQLSdsD_qLU51OC9UY0Rrx_Ht52aU0TgPU-LUu5yNp4ta8cYu0yQ/viewform?usp=pp_url\";    \r\n    //Chat record Google Form field entries\r\n    const recordFormEntries = {\r\n        'date': \"entry.1533999842\",\r\n        'startTime': \"entry.240218030\",\r\n        'endTime': \"entry.1133078412\"\r\n    }\r\n    //Refernce of the Message container div \r\n    const messageContainerDiv = useRef(null);\r\n    //Reference of the Client container div;\r\n    const clientContainerDiv = useRef(null);\r\n    //Chat Queue local list copy\r\n    const [clientQueue, setClientQueue] = useState([]);\r\n    //Current Chat Client ID\r\n    const [currentClient, setCurrentClient] = useState(null);\r\n    //Disconnect time of current client\r\n    const [disconnectTime, setDisconnectTime] = useState(null);\r\n    //Chat Log local list copy\r\n    const [chatLog, setChatLog] = useState([]);\r\n    //Flag indicating a start-chat is in progress\r\n    const [isStartingChat, setIsStartingChat] = useState(false);\r\n    //Flag indicating an end-chat is in progress\r\n    const [isEndingChat, setIsEndingChat] = useState(false);\r\n    //Flag indicating a chat message is being sent\r\n    const [isSendingMessage, setIsSendingMessage] = useState(false);\r\n    //Flag indicating the chat queue container is shown full screen (in smaller screen devices)\r\n    const [isQueueOpened, setIsQueueOpened] = useState(false);\r\n    //Flag indicating the current client is typing\r\n    const [isClientTyping, setIsClientTyping] = useState(false);\r\n    //Flag indicating the current user is typing\r\n    const [isUserTyping, setIsUserTyping] = useState(false);\r\n    //Flag indicating the emoji picker is opened\r\n    const [isPickerOpened, setIsPickerOpened] = useState(false);\r\n\r\n\r\n    //Callback for handling new chat messages\r\n    const handleNewChatMessage = (snapshot, preChildKey)=>{\r\n        console.log(snapshot.val());\r\n    };\r\n\r\n    //Callback for handling removed chat messages\r\n    const handleRemovedChatMessage = (oldSnapshot)=>{\r\n        console.log(oldSnapshot.val());\r\n    };\r\n\r\n    //Callback for handling chat log changes\r\n    const handleChatLogChanges = (snapshot)=>{\r\n        let tmpChatLog = [];\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (const chatId in snapshot.val()) tmpChatLog.push({\r\n                'chatId': chatId,\r\n                'uid': snapshot.val()[chatId]['uid'],\r\n                'time': snapshot.val()[chatId]['time'],\r\n                'msg': snapshot.val()[chatId]['msg'],\r\n                'spc': snapshot.val()[chatId]['spc']\r\n            });\r\n        }\r\n        console.log(tmpChatLog);\r\n        setChatLog(tmpChatLog);\r\n    };\r\n\r\n    //Callback for handling Chat Queue changes\r\n    const handleQueueChanges = (snapshot)=>{\r\n        let tmpClientQueue = [];\r\n        let isNewEnqueue = false;\r\n        const oldClientQueue = document.querySelectorAll('.chatroom .queue-container .clients-container .queue-client .client-id');\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() != null){\r\n            for (let userId in snapshot.val()){\r\n                tmpClientQueue.push({\r\n                    'userId': userId,\r\n                    'status': snapshot.val()[userId]['status'],\r\n                    'time': snapshot.val()[userId]['time']\r\n                });\r\n                if (!isNewEnqueue){\r\n                    let isOldEnqueue = false;\r\n                    oldClientQueue.forEach((client)=>{\r\n                        if (client.innerHTML === userId) isOldEnqueue = true;\r\n                    });\r\n                    isNewEnqueue = (!isOldEnqueue);\r\n                }\r\n            }\r\n            for (let i=0; i<tmpClientQueue.length; i++){\r\n                for (let j=0; j<tmpClientQueue.length - i - 1; j++){\r\n                    if (tmpClientQueue[j]['time']>tmpClientQueue[j+1]['time']){\r\n                        let tmp = tmpClientQueue[j];\r\n                        tmpClientQueue[j] = tmpClientQueue[j+1];\r\n                        tmpClientQueue[j+1] = tmp;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isNewEnqueue){\r\n            let audio = new Audio(newClientSound);\r\n            audio.play();\r\n        }\r\n        console.log(tmpClientQueue);\r\n        setClientQueue(tmpClientQueue);\r\n    }\r\n\r\n    //Callback for handling disconnect/reconnect changes\r\n    const handleConnectionChanges = (snapshot)=>{\r\n        setDisconnectTime(snapshot.val());\r\n    };\r\n\r\n    //Callback for handling typing status changes\r\n    const handleTypingStatusChanges = (snapshot)=>{\r\n        setIsClientTyping(snapshot.val());\r\n    }\r\n\r\n    //Function for setting up chatroom database listeners \r\n    const setupChatroomListener = async ()=>{\r\n        try{\r\n            queueRef.orderByChild('time').on('value', handleQueueChanges);\r\n            chatroomRef.orderByChild('time').on('value', handleChatLogChanges);\r\n            let localCurrentClient = sessionStorage.getItem('heartlinehk-currentClient');\r\n            let assignedSnapshot = await assignedRef.once('value');\r\n            for (let clientId in assignedSnapshot.val()){\r\n                if (assignedSnapshot.val()[clientId] === props.currentUser.uid){\r\n                    if (localCurrentClient !== null && localCurrentClient !== clientId) console.warn(\"WARNING: updating local current client as it is different from database!\");\r\n                    localCurrentClient = clientId;\r\n                    break;\r\n                }\r\n            }\r\n            if (localCurrentClient != null){\r\n                disconnectRef.child(localCurrentClient).on('value', handleConnectionChanges);\r\n                typingRef.child(localCurrentClient).on('value', handleTypingStatusChanges);\r\n                setCurrentClient(localCurrentClient);\r\n                sessionStorage.setItem('heartlinehk-currentClient', localCurrentClient);\r\n            }else console.warn(\"WARNING: No client is assigned to the current volunteer!\");\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n        }\r\n\r\n    };\r\n\r\n    //Function for initiating a new chat\r\n    const startNewChat = async (e)=>{\r\n        //Progress variable indicates the progress of the start-chat function\r\n        //This can be used to reset everything done if an error has occurred\r\n        let progress = 0;\r\n        //Temp target client ID\r\n        let tmpCurrentClient = null;\r\n        //Temp target client's time-of-arrival in queue\r\n        let tmpInQueueTime = null;\r\n        try{\r\n            //Check if a new chat is already starting\r\n            if (isStartingChat) throw new Error(\"Already starting a new chat!\");\r\n            setIsStartingChat(true);\r\n\r\n            //Check if all database references are available\r\n            if (!queueRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Chat Queue reference not available!\");\r\n            }else if (!assignedRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Room Assigned reference not available!\");\r\n            }else if (!chatroomRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Chat Room reference not available!\");\r\n            }else if (!disconnectRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Disconnect Time reference not available!\");\r\n            }else if (!typingRef){\r\n                setIsStartingChat(false);\r\n                throw new ReferenceError(\"Typing Status reference not available!\");\r\n            }\r\n            //Check if current client is already set\r\n            else if (currentClient != null){\r\n                setIsStartingChat(false);\r\n                throw new Error(\"CurrentClient is already set!\");\r\n            }else{\r\n                //Get the target client\r\n                let snapshot = await queueRef.orderByChild('time').once('value');\r\n                let tmpClientQueue = [];\r\n                if (snapshot.val() != null){\r\n                    for (let userId in snapshot.val()){\r\n                        tmpClientQueue.push({\r\n                            'userId': userId,\r\n                            'status': snapshot.val()[userId]['status'],\r\n                            'time': snapshot.val()[userId]['time']\r\n                        });\r\n                    }\r\n                    for (let i=0; i<tmpClientQueue.length; i++){\r\n                        for (let j=0; j<tmpClientQueue.length - i - 1; j++){\r\n                            if (tmpClientQueue[j]['time']>tmpClientQueue[j+1]['time']){\r\n                                let tmp = tmpClientQueue[j];\r\n                                tmpClientQueue[j] = tmpClientQueue[j+1];\r\n                                tmpClientQueue[j+1] = tmp;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (let i in tmpClientQueue){\r\n                    if (tmpClientQueue[i]['status'] === \"inQueue\"){\r\n                        tmpCurrentClient = tmpClientQueue[i]['userId'];\r\n                        tmpInQueueTime = tmpClientQueue[i]['time'];\r\n                        break;\r\n                    }\r\n                }\r\n                if (tmpCurrentClient === null){\r\n                    setIsStartingChat(false);\r\n                    throw new RangeError(\"No available client in chat queue!\");\r\n                }\r\n\r\n                //Set target client queue status to \"roomAssigned\"\r\n                //This is to prevent multiple volunteers dequeueing the same client\r\n                let queueClientRef = queueRef.child(tmpCurrentClient);\r\n                let queueClientTransaction = await queueClientRef.transaction((queueClient)=>{\r\n                    if (queueClient === null){\r\n                        console.error(\"ERROR: Required Queue Client is Null!\");\r\n                        return;\r\n                    }else if (queueClient['status'] === 'roomAssigned'){\r\n                        console.error(\"ERROR: Required Queue Client has already assigned a room!\");\r\n                        return;\r\n                    }else if (queueClient['status'] === 'inQueue'){\r\n                        return ({\r\n                            'status': \"roomAssigned\",\r\n                            'time': firebase.database.ServerValue.TIMESTAMP\r\n                        });\r\n                    }else{\r\n                        console.error(\"Unknown Error!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (queueClientTransaction.error){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(queueClientTransaction.error);\r\n                } else if (!queueClientTransaction.committed){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(\"Client Queue Transaction Aborted!\");\r\n                }\r\n                progress += 1;\r\n\r\n                //Set the assigned room of the client to current volunteer ID\r\n                let assignedClientRef = assignedRef.child(tmpCurrentClient);\r\n                let assignedClientTransaction = await assignedClientRef.transaction((assignedClient)=>{\r\n                    if (assignedClient === null){\r\n                        return props.currentUser.uid;\r\n                    }else{\r\n                        console.error(\"ERROR: Client to be assigned has a non-null volunteer ID!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (assignedClientTransaction.error){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(assignedClientTransaction.error);\r\n                }else if (!assignedClientTransaction.committed){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(\"Client Room Assigned Transaction Aborted!\");\r\n                }\r\n                progress += 1;\r\n\r\n                //If Chatroom is not empty, remove all previous messages\r\n                let tmpChatLog = (await chatroomRef.once('value')).val();\r\n                if (tmpChatLog != null) await chatroomRef.remove();\r\n                progress += 1;\r\n\r\n                //Send an initial message to the chat\r\n                let initialMessageRef = await chatroomRef.push();\r\n                let initialMessageTransaction = await initialMessageRef.transaction((initialMessage)=>{\r\n                    if (initialMessage === null){\r\n                        return {\r\n                            'uid': props.currentUser.uid,\r\n                            'time': firebase.database.ServerValue.TIMESTAMP,\r\n                            'spc': tmpCurrentClient\r\n                        };\r\n                    }else{\r\n                        console.error(\"ERROR: Initial Message is not null!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (initialMessageTransaction.error){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(initialMessageTransaction.error);\r\n                }else if (!initialMessageTransaction.committed){\r\n                    setIsStartingChat(false);\r\n                    throw new Error(\"Initial Message Transaction Aborted!\");\r\n                }\r\n                progress += 1;\r\n\r\n                //Set current client\r\n                sessionStorage.setItem('heartlinehk-currentClient', tmpCurrentClient);\r\n                setCurrentClient(tmpCurrentClient);\r\n\r\n                //Subscribe to current client's disconnect time and typing status\r\n                disconnectRef.child(tmpCurrentClient).on('value', handleConnectionChanges);\r\n                typingRef.child(tmpCurrentClient).on('value', handleTypingStatusChanges);\r\n\r\n                //End of procedure of starting a new chat\r\n                setIsStartingChat(false);\r\n            }\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            //Resets all finished progress\r\n            if (progress >= 1) await queueRef.child(tmpCurrentClient).set({\r\n                'status': \"inQueue\",\r\n                \"time\": tmpInQueueTime\r\n            });\r\n            if (progress >= 2) await assignedRef.child(tmpCurrentClient).remove();\r\n            //If the step fails at this stage, \r\n            //meaning all the works on database are done.\r\n            //So no resetting is needed. \r\n            if (progress >= 4){\r\n                sessionStorage.setItem('heartlinehk-currentClient', tmpCurrentClient);\r\n                setCurrentClient(tmpCurrentClient);\r\n                setIsStartingChat(false);\r\n            }\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    //Function for ending a continuing chat\r\n    const endChat = async () =>{\r\n        //Progress variable indicates the progress of the start-chat function\r\n        //This can be used to reset everything done if an error has occurred\r\n        let progress = 0;\r\n        //Flag indicating if the client has left or not\r\n        let isClientLeft = false;\r\n        //Start and End Chat Time in milliseconds\r\n        let startChatMsec = 0;\r\n        let endChatMsec = 0;\r\n        try{\r\n            //Check if a chat is already ending\r\n            if (isEndingChat) throw new Error(\"Already ending a chat!\");\r\n            setIsEndingChat(true);\r\n\r\n            //Check if all database references are available\r\n            if (!assignedRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Room Assigned reference not available!\");\r\n            }else if (!chatroomRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Chat Room reference not available!\");\r\n            }else if (!disconnectRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Disconnect Time reference not available!\");\r\n            }else if (!typingRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Typing Status reference not available!\");\r\n            }else if (!recordRef){\r\n                setIsEndingChat(false);\r\n                throw new ReferenceError(\"Chat Records reference not available!\");\r\n            }\r\n            //Check if current client is null or not\r\n            else if (currentClient == null){\r\n                setIsEndingChat(false);\r\n                throw new Error(\"Current Client is null!\");\r\n            }else{\r\n                //Check if current client has left\r\n                //The client has left when either the room assigned is null\r\n                let snapshot = await assignedRef.child(currentClient).once('value');\r\n                let isRoomAssignedNull = (snapshot.val() === null);\r\n                //or the chat log has a special message of \"clientLeft\"\r\n                let tmpChatLog = (await chatroomRef.once('value')).val();\r\n                let isSpecialMessage  = false; \r\n                if (tmpChatLog != null){\r\n                    for (let chatId in tmpChatLog){\r\n                        if (tmpChatLog[chatId]['spc'] === \"clientLeft\"){\r\n                            isSpecialMessage = true;\r\n                            break;\r\n                        } \r\n                    }\r\n                }\r\n                //Also check if the client is still in queue(i.e. never accept the chat)\r\n                let isClientInQueue = ((await queueRef.child(currentClient).once('value')).val() != null);\r\n                console.log(isRoomAssignedNull, isSpecialMessage, isClientInQueue);\r\n                isClientLeft = (isRoomAssignedNull || isSpecialMessage);\r\n                progress += 1;\r\n\r\n                //If client hasn't left, set the room assigned to \"volunLeft\"\r\n                if (!isClientLeft){\r\n                    if (!isRoomAssignedNull) await assignedRef.child(currentClient).set(\"volunLeft\");\r\n                    if (isClientInQueue) await queueRef.child(currentClient).remove();\r\n                }\r\n                progress += 1;\r\n\r\n                //Get the start and end time of the chat\r\n                let initialChatMessage = (await chatroomRef.orderByChild('time').limitToFirst(1).once('value')).val();\r\n                for (let chatId in initialChatMessage) startChatMsec = initialChatMessage[chatId]['time'];\r\n                endChatMsec = Date.now();\r\n\r\n                //Delete the chat log\r\n                let chatroomTransaction = await chatroomRef.transaction((chatLog)=>{\r\n                    if (chatLog != null){\r\n                        return null;\r\n                    }else{\r\n                        console.error(\"ERROR: Chat Log in Chatroom already null!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (chatroomTransaction.error){\r\n                    setIsEndingChat(false);\r\n                    throw new Error(chatroomTransaction.error);\r\n                }else if (!chatroomTransaction.committed){\r\n                    setIsEndingChat(false);\r\n                    throw new Error(\"Chatrom Transaction Aborted!\");\r\n                }\r\n                setChatLog([]);\r\n                progress += 1;\r\n\r\n                //Update the chat record\r\n                let currentRecordRef = await recordRef.push();\r\n                await currentRecordRef.set({\r\n                    'uid': props.currentUser.uid,\r\n                    'start': startChatMsec,\r\n                    'end': endChatMsec\r\n                });\r\n\r\n                //Remove Typing Status\r\n                await typingRef.child(props.currentUser.uid).remove();\r\n\r\n                //Unsubscribe to current client's disconnect time and typing status\r\n                disconnectRef.child(currentClient).off('value');\r\n                setDisconnectTime(null);\r\n                typingRef.child(currentClient).off('value');\r\n                setIsClientTyping(false);\r\n\r\n                //Reset current client\r\n                sessionStorage.removeItem('heartlinehk-currentClient');\r\n                setCurrentClient(null);\r\n                \r\n                //End of procedure of ending a chat\r\n                setIsEndingChat(false);\r\n\r\n                //Open popup window for chat record form\r\n                let startChatTime = new Date(startChatMsec);\r\n                const startChatHour = (startChatTime.getHours()<10?\"0\"+startChatTime.getHours().toString():startChatTime.getHours().toString());\r\n                const startChatMinutes = (startChatTime.getMinutes()<10?\"0\"+startChatTime.getMinutes().toString():startChatTime.getMinutes().toString());\r\n                let endChatTime = new Date(endChatMsec);\r\n                const endChatHour = (endChatTime.getHours()<10?\"0\"+endChatTime.getHours().toString():endChatTime.getHours().toString());\r\n                const endChatMinutes = (endChatTime.getMinutes()<10?\"0\"+endChatTime.getMinutes().toString():endChatTime.getMinutes().toString());\r\n                const currentMonth = (endChatTime.getMonth()+1<10?\"0\"+(endChatTime.getMonth()+1).toString():(endChatTime.getMonth()+1).toString());\r\n                const currentDay = (endChatTime.getDate()<10?\"0\"+endChatTime.getDate().toString():endChatTime.getDate().toString());\r\n                const prefilledRecordFormUrl = recordFormUrl+'&'+recordFormEntries['date']+'='+endChatTime.getFullYear()+'-'+currentMonth+'-'+currentDay+'&'+recordFormEntries['startTime']+'='+startChatHour+\":\"+startChatMinutes+'&'+recordFormEntries['endTime']+'='+endChatHour+\":\"+endChatMinutes;\r\n                let popupWindowRef = window.open(prefilledRecordFormUrl, \"ChatRecordForm\", 'resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no,status=yes');\r\n                \r\n            }\r\n        }catch(error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            if (progress >= 2){\r\n                if (!isClientLeft) await assignedRef.child(currentClient).set(props.currentUser.uid);\r\n            } \r\n            //If the step fails at this stage, \r\n            //meaning all the works on database are done.\r\n            //So no resetting is needed. \r\n            if (progress >= 3){\r\n                disconnectRef.child(currentClient).off('value');\r\n                setDisconnectTime(null);\r\n                typingRef.child(currentClient).off('value');\r\n                setIsClientTyping(false);\r\n\r\n                sessionStorage.removeItem('heartlinehk-currentClient');\r\n                setCurrentClient(null);\r\n\r\n                let startChatTime = new Date(startChatMsec);\r\n                const startChatHour = (startChatTime.getHours()<10?\"0\"+startChatTime.getHours().toString():startChatTime.getHours().toString());\r\n                const startChatMinutes = (startChatTime.getMinutes()<10?\"0\"+startChatTime.getMinutes().toString():startChatTime.getMinutes().toString());\r\n                let endChatTime = new Date(endChatMsec);\r\n                const endChatHour = (endChatTime.getHours()<10?\"0\"+endChatTime.getHours().toString():endChatTime.getHours().toString());\r\n                const endChatMinutes = (endChatTime.getMinutes()<10?\"0\"+endChatTime.getMinutes().toString():endChatTime.getMinutes().toString());\r\n                const currentMonth = (endChatTime.getMonth()+1<10?\"0\"+(endChatTime.getMonth()+1).toString():(endChatTime.getMonth()+1).toString());\r\n                const currentDay = (endChatTime.getDate()<10?\"0\"+endChatTime.getDate().toString():endChatTime.getDate().toString());\r\n                const prefilledRecordFormUrl = recordFormUrl+'&'+recordFormEntries['date']+'='+endChatTime.getFullYear()+'-'+currentMonth+'-'+currentDay+'&'+recordFormEntries['startTime']+'='+startChatHour+\":\"+startChatMinutes+'&'+recordFormEntries['endTime']+'='+endChatHour+\":\"+endChatMinutes;\r\n                let popupWindowRef = window.open(prefilledRecordFormUrl, \"ChatRecordForm\", 'resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no,status=yes');\r\n            }\r\n            alert(error.message);\r\n        }\r\n\r\n    }\r\n\r\n    //Function for sending chat message\r\n    const sendChatMessage = async (e)=>{\r\n        e.preventDefault();\r\n        try{\r\n            //Check if a message is already sending\r\n            if (isSendingMessage) throw new Error(\"Already sending a message!\");\r\n            setIsSendingMessage(true);\r\n\r\n            //Check if a chat is ongoing\r\n            if (currentClient === null){\r\n                setIsSendingMessage(false);\r\n                throw new Error(\"Current Client is null!\");\r\n            }\r\n            //Check if the message to be sent is empty\r\n            let messageToBeSent = document.getElementById('msg-input').value;\r\n            if (messageToBeSent === null || messageToBeSent === \"\"){\r\n                setIsSendingMessage(false);\r\n                throw new Error(\"Message to be sent is empty!\");\r\n            }else if (!chatroomRef){\r\n                setIsSendingMessage(false);\r\n                throw new ReferenceError(\"Chatroom reference not available!\");\r\n            }else if (!typingRef){\r\n                setIsSendingMessage(false);\r\n                throw new ReferenceError(\"Typing Status reference not available!\");\r\n            }else{\r\n                //Send the message to chatroom\r\n                let newMessageRef = await chatroomRef.push();\r\n                let newMessageTransaction = await newMessageRef.transaction((newMessage)=>{\r\n                    if (newMessage === null){\r\n                        return {\r\n                            'uid': props.currentUser.uid,\r\n                            'time': firebase.database.ServerValue.TIMESTAMP,\r\n                            'msg': messageToBeSent\r\n                        };\r\n                    }else{\r\n                        console.error(\"ERROR: New Message is not null!\");\r\n                        return;\r\n                    }\r\n                });\r\n                if (newMessageTransaction.error){\r\n                    setIsSendingMessage(false);\r\n                    throw new Error(newMessageTransaction.error);\r\n                }else if (!newMessageTransaction.committed){\r\n                    setIsSendingMessage(false);\r\n                    throw new Error(\"New Message Transaction Aborted!\");\r\n                }\r\n\r\n                //Rese the typing status\r\n                setIsUserTyping(false);\r\n                await typingRef.child(props.currentUser.uid).set(false);\r\n\r\n                //Clear the message input\r\n                document.getElementById('msg-input').value = \"\";\r\n                console.log(\"Message sent!\");\r\n\r\n                setIsSendingMessage(false);\r\n            }\r\n        }catch (error){\r\n            console.error(\"ERROR: \"+error.message);\r\n            alert(error.message);\r\n        }\r\n    };\r\n\r\n    //Function for changing the typing status of current user on database\r\n    const changeTypingStatus = (e)=>{\r\n        if (currentClient){\r\n            const currentlyTyping = (e.target.value != \"\");\r\n            if (currentlyTyping != isUserTyping){\r\n                if (typingRef){\r\n                    setIsUserTyping(currentlyTyping);\r\n                    typingRef.child(props.currentUser.uid).set(currentlyTyping);\r\n                }else console.error(\"ERROR: Typing Status reference not available!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //Callback for handling the form submission of end chat confirmation modal\r\n    const endChatFormHandler = (e)=>{\r\n        e.preventDefault();\r\n        const modalContainerDiv = e.target.parentElement.parentElement;\r\n        if (modalContainerDiv.id === \"endchat-modal\"){\r\n            const isConfirmed = (e.target.className === \"confirm-btn\");\r\n            if (isConfirmed) endChat();\r\n            modalContainerDiv.classList.remove(\"opened\");\r\n        }else console.error(\"ERROR: Parent Element is not an end chat modal!\");\r\n    }\r\n\r\n    //Callback for handling the form submission of start chat confirmation modal\r\n    const startChatFormHandler = (e)=>{\r\n        e.preventDefault();\r\n        const modalContainerDiv = e.target.parentElement.parentElement;\r\n        if (modalContainerDiv.id === \"startchat-modal\"){\r\n            const isConfirmed = (e.target.className === \"confirm-btn\");\r\n            if (isConfirmed){\r\n                toggleQueue();\r\n                startNewChat();\r\n            }\r\n            modalContainerDiv.classList.remove(\"opened\");\r\n        }else console.error(\"ERROR: Parent Element is not a start chat modal!\");\r\n    }\r\n\r\n    //Callback for handling selection of emoji in the emoji picker\r\n    const emojiPickerHandler = (e, emojiObject)=>{\r\n        console.log(emojiObject.emoji);\r\n        const msgInput = document.querySelector(\".chatroom .chat-container .input-container #msg-input\");\r\n        let originalMsgStart = msgInput.value.substring(0, msgInput.selectionStart);\r\n        let originalMsgEnd = msgInput.value.substring(msgInput.selectionEnd, msgInput.value.length);\r\n        if (msgInput.selectionStart === 0 && msgInput.selectionEnd === 0){\r\n            originalMsgStart = msgInput.value;\r\n            originalMsgEnd = \"\";\r\n        }\r\n        msgInput.value = originalMsgStart + emojiObject.emoji + originalMsgEnd;\r\n        msgInput.focus();\r\n        msgInput.setSelectionRange(originalMsgStart.length+2, originalMsgStart.length+2);\r\n\r\n    }\r\n\r\n    //Callback for handling selection of special chinese character\r\n    const specialCharHandler = (e)=>{\r\n        const specialChar = e.target.innerHTML;\r\n        console.log(specialChar);\r\n        const msgInput = document.querySelector(\".chatroom .chat-container .input-container #msg-input\");\r\n        let originalMsgStart = msgInput.value.substring(0, msgInput.selectionStart);\r\n        let originalMsgEnd = msgInput.value.substring(msgInput.selectionEnd, msgInput.value.length);\r\n        if (msgInput.selectionStart === 0 && msgInput.selectionEnd === 0){\r\n            originalMsgStart = msgInput.value;\r\n            originalMsgEnd = \"\";\r\n        }\r\n        msgInput.value = originalMsgStart + specialChar + originalMsgEnd;\r\n        msgInput.focus();\r\n        msgInput.setSelectionRange(originalMsgStart.length+1, originalMsgStart.length+1);\r\n    }\r\n\r\n    //Function for toggling between Queue and Chat on screen (in smaller screen devices)\r\n    const toggleQueue = ()=>{\r\n        if (isQueueOpened) setIsQueueOpened(false);\r\n        else setIsQueueOpened(true);\r\n        document.querySelector('.chatroom').classList.toggle(\"queue-opened\");\r\n\r\n    }\r\n\r\n    //Function for toggling the emoji picker\r\n    const toggleEmojiPicker = ()=>{\r\n        if (isPickerOpened) setIsPickerOpened(false);\r\n        else setIsPickerOpened(true);\r\n    }\r\n\r\n    //Function for side-scrolling the special chinese character container\r\n    const scrollSpecialChar = (e)=>{\r\n        const rem = parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n        const spcCharDiv = document.querySelector('.chatroom .chat-container .special-char-container');\r\n        const arrowButton = (e.target.className === \"material-icons\"?(e.target.innerHTML === \"arrow_back_ios\"?\"back-arrow\":\"forward-arrow\"):e.target.className);\r\n        if (arrowButton === \"back-arrow\") spcCharDiv.scrollBy(-(1.3 * rem + 12), 0);\r\n        else if (arrowButton === \"forward-arrow\") spcCharDiv.scrollBy((1.3 * rem + 12), 0);\r\n    }\r\n\r\n    const getFormattedDateString = (msec) =>{\r\n        let targetDate = new Date(msec);\r\n        let hourString = (targetDate.getHours()<10?\"0\"+targetDate.getHours().toString():targetDate.getHours().toString());\r\n        let minuteString = (targetDate.getMinutes()<10?\"0\"+targetDate.getMinutes().toString():targetDate.getMinutes().toString());\r\n        let monthString = (targetDate.getMonth()<9?\"0\"+(targetDate.getMonth()+1).toString():(targetDate.getMonth()+1).toString());\r\n        let dayString = (targetDate.getDate()<10?\"0\"+targetDate.getDate().toString():targetDate.getDate().toString());\r\n\r\n        return (hourString+\":\"+minuteString+\", \"+dayString+\"/\"+monthString);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        console.log(\"Chatroom mounted!\");\r\n        setupChatroomListener();\r\n\r\n        return ()=>{\r\n            //Unsubscribe events when unmount component\r\n            console.log(\"Chatroom Unmounted!\");\r\n            let localCurrentClient = sessionStorage.getItem('heartlinehk-currentClient');\r\n            queueRef.orderByChild('time').off('value');\r\n            chatroomRef.orderByChild('time').off('value');\r\n            if (localCurrentClient){\r\n                disconnectRef.child(localCurrentClient).off('value');\r\n                typingRef.child(localCurrentClient).off('value');\r\n                sessionStorage.removeItem('heartlinehk-currentClient');\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if (chatLog.length > 0){\r\n            messageContainerDiv.current.scrollTo(0, messageContainerDiv.current.scrollHeight);\r\n        }\r\n    }, [chatLog]);\r\n\r\n    return (\r\n        <div className=\"chatroom\">\r\n            <ConfirmModal modalId={\"endchat-modal\"} confirmText={\"你確定要結束對話嗎？\"} formSubmitHandler={endChatFormHandler}></ConfirmModal>\r\n            <ConfirmModal modalId={\"startchat-modal\"} confirmText={\"你確定要開啟新對話嗎？\"} formSubmitHandler={startChatFormHandler}></ConfirmModal>\r\n            {(isStartingChat || isEndingChat) && <Loading></Loading>}\r\n            <div className=\"chat-container\">\r\n                {disconnectTime != null &&\r\n                    <p className=\"disconnect-msg\">使用者已於{getFormattedDateString(disconnectTime)}開始離線。</p>\r\n                }\r\n                <div ref={messageContainerDiv} className=\"messages-container\">\r\n                    {chatLog.map((val, idx)=>{\r\n                        return(\r\n                            <p key={val['chatId']} className={\"message \"+(val['spc']?\"special\":(val['uid'] === props.currentUser.uid?\"right\":\"left\"))}>\r\n                                {(val['msg']?val['msg']:(specialChatMessages[val['spc']]?specialChatMessages[val['spc']]:specialChatMessages['clientId']))}\r\n                                <span>{getFormattedDateString(val['time'])}</span>\r\n                            </p>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className=\"special-char-container\">\r\n                    <button className=\"back-arrow\" onClick={scrollSpecialChar}><span className=\"material-icons\">arrow_back_ios</span></button>\r\n                    {specialChineseChars.map((char, idx)=>{\r\n                        return (\r\n                            <button key={\"spc-char\"+idx} className=\"spc-char\" onClick={specialCharHandler}>{char}</button>\r\n                        );\r\n                    })}\r\n                    <button className=\"forward-arrow\" onClick={scrollSpecialChar}><span className=\"material-icons\">arrow_forward_ios</span></button>\r\n                </div>\r\n                <form className=\"input-container\" onSubmit={sendChatMessage}>\r\n                    {isClientTyping && \r\n                        <p className=\"typing-msg\">使用者正在輸入...</p>\r\n                    }\r\n                    <button type=\"button\" name=\"emoji-btn\" id=\"emoji-btn\" onClick={toggleEmojiPicker}><span className=\"material-icons\">emoji_emotions</span></button>\r\n                    <input type=\"text\" name=\"msg-input\" id=\"msg-input\" placeholder=\"按此對話…\" onInput={changeTypingStatus}/>\r\n                    <button type=\"submit\" name=\"submit-btn\" id=\"submit-btn\"><span className=\"material-icons\">send</span></button>\r\n                </form>\r\n                \r\n                {isPickerOpened && <Picker onEmojiClick={emojiPickerHandler}></Picker>}\r\n            </div>\r\n            <div className=\"queue-container\">\r\n                <p className=\"main-text\"><span className=\"material-icons\">people</span><span className=\"queue-count\">{clientQueue.length}</span></p>\r\n                <div ref={clientContainerDiv} className=\"clients-container\">\r\n                    {clientQueue.map((val, idx)=>{\r\n                        return (\r\n                            <p key={val['userId']} className={\"queue-client\"+(val['status'] === \"roomAssigned\"?\" assigned\":\"\")}>\r\n                                Client <span className=\"client-id\">{val['userId']}</span>\r\n                                <span className=\"enqueue-time\" data-time={val[\"time\"]}>{(val[\"status\"] === \"roomAssigned\"?\"被接收\":\"入隊\")}時間: {getFormattedDateString(val['time'])}</span>\r\n                            </p>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                    <button type=\"submit\" name=\"start-btn\" id=\"start-btn\" disabled={currentClient != null || clientQueue.length <= 0} onClick={()=>{document.getElementById(\"startchat-modal\").classList.add(\"opened\")}}>開始對話</button>\r\n                    <button type=\"submit\" name=\"end-btn\" id=\"end-btn\" disabled={currentClient == null} onClick={()=>{document.getElementById(\"endchat-modal\").classList.add(\"opened\")}}>結束對話</button>\r\n                </div>\r\n            </div>\r\n            <button className=\"queue-toggle\" onClick={toggleQueue}><span className=\"material-icons\">{(isQueueOpened?\"chat\":\"contacts\")}</span></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chatroom;","import \"../styles/Dashboard.css\";\r\n\r\nconst Dashboard = () =>{\r\n    return(\r\n        <div className=\"dashboard\">\r\n            <h1>WORK IN PROGRESS</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","import \"../styles/Login.css\";\r\n\r\nconst Login = (props) =>{\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <h1 className=\"main-text\">HeartlineHK Login</h1>\r\n            <form className=\"login-form\" onSubmit={props.handleLogin}>\r\n                <label htmlFor=\"login-email\">Email:</label>\r\n                <input type=\"email\" name=\"login-email\" id=\"login-email\" required />\r\n                <label htmlFor=\"login-pwd\">Password:</label>\r\n                <input type=\"password\" name=\"login-password\" id=\"login-password\" required />\r\n                <input type=\"submit\" value=\"Login\" name=\"login-submit\" id=\"login-submit\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ConfirmModal from \"./components/ConfirmModal.js\";\nimport NoticeModal from \"./components/NoticeModal.js\";\nimport NavBar from \"./components/NavBar.js\";\nimport ProfileUpdate from \"./pages/ProfileUpdate.js\";\nimport Supervisor from \"./pages/Supervisor.js\";\nimport Chatroom from \"./pages/Chatroom.js\";\nimport Dashboard from \"./pages/Dashboard.js\";\nimport Login from \"./pages/Login.js\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nfunction App() {\n\n  const onlineTimeRef = firebase.database().ref('online_time');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [auth, setAuth] = useState(firebase.auth());\n\n  const handleOnlineTimeChanges = (snapshot)=>{\n    if (snapshot.val() != null){\n      const loggedInUid = snapshot.val()['uid'];\n      const agentUid = sessionStorage.getItem('heartlinehk-agentUid');\n      if (loggedInUid != agentUid){\n        document.getElementById('auto-logout-modal').classList.add('opened');\n        handleLogout(true);\n      }\n    }\n  };\n\n  const handleLogin = async (e) =>{\n    e.preventDefault();\n    if (!isLoggingIn){\n        setIsLoggingIn(true);\n        let currentEmail = document.getElementById('login-email').value;\n        let currentPassword = document.getElementById('login-password').value;\n        try{\n          await auth.setPersistence(firebase.auth.Auth.Persistence.SESSION);\n          await auth.signInWithEmailAndPassword(currentEmail, currentPassword);\n          console.log(auth.currentUser);\n          if (sessionStorage.getItem('heartlinehk-agentUid') === null){\n            console.log(\"No UID found, generate now!\");\n            sessionStorage.setItem('heartlinehk-agentUid', generateId(12));\n          }\n          const agentUid = sessionStorage.getItem('heartlinehk-agentUid');\n          await onlineTimeRef.child(auth.currentUser.uid).set({\n            'uid': agentUid,\n            'time': firebase.database.ServerValue.TIMESTAMP\n          });\n        }catch (error){\n          console.error(error.message);\n          alert(error.message);\n        }\n        setIsLoggingIn(false);\n    }else{\n      console.error(\"Already logging in\");\n      alert(\"Already logging in!\");\n    }\n  }\n\n  const handleLogout = async (isAutoLogout=false) =>{\n    try{\n      onlineTimeRef.child(auth.currentUser.uid).off('value');\n      if (!isAutoLogout) await onlineTimeRef.child(auth.currentUser.uid).remove();\n      await auth.signOut();\n      console.log(\"Signed out!\");\n    }catch(error){\n      console.error(error.message);\n      alert(error.message);\n    }\n  }\n\n  //Callback for handling the form submission of logout confirmation modal\n  const logoutFormHandler = (e)=>{\n    e.preventDefault();\n    const modalContainerDiv = e.target.parentElement.parentElement;\n    if (modalContainerDiv.id === \"logout-modal\"){\n        const isConfirmed = (e.target.className === \"confirm-btn\");\n        if (isConfirmed) handleLogout();\n        modalContainerDiv.classList.remove(\"opened\");\n    }else console.error(\"ERROR: Parent Element is not a logout modal!\");\n  }\n\n  //Callback for handling form submission of aut logout notice modal\n  const autoLogoutFormHandler = (e)=>{\n    e.preventDefault();\n    const modalContainerDiv = e.target.parentElement.parentElement;\n    if (modalContainerDiv.id === \"auto-logout-modal\") modalContainerDiv.classList.remove(\"opened\");\n    else console.error(\"ERROR: Parent Element is not a logout modal!\");\n  }\n\n  //Function for generating short ID\n  const generateId = (length)=>{\n    let tmpId = \"\";\n    let charType = 0;\n    let numOfChar = 26;\n    let asciiStart = 97\n    for (let i=0; i<length; i++){\n      charType = Math.floor(Math.random() * 3);\n      numOfChar = (charType === 0 || charType === 1?26:10);\n      asciiStart = (charType === 0?97:(charType === 1?65:48));\n      tmpId = tmpId + String.fromCharCode(Math.floor(Math.random() * numOfChar) + asciiStart);\n    }\n    return tmpId;\n  };\n\n  useEffect(()=>{\n    const authChangeListener = firebase.auth().onAuthStateChanged((user)=>{\n      if (user){\n        setCurrentUser(user);\n        onlineTimeRef.child(user.uid).off('value');\n        onlineTimeRef.child(user.uid).on('value', handleOnlineTimeChanges);\n      }else setCurrentUser(null);\n    });\n    return authChangeListener;\n  });\n\n  useEffect(()=>{\n    const setViewHeight = ()=>{\n      let vh = window.innerHeight * 0.01;\n      console.log(vh);\n      console.log(window.innerHeight);\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    };\n    \n    setViewHeight();\n    window.addEventListener('resize', setViewHeight);\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\" style={{width: \"100vw\", minHeight: \"calc(100 * var(--vh, 1vh))\", position: \"relative\", backgroundColor: \"rgba(0,0,0,0.05)\", display: \"flex\", flexDirection:\"row\", overflow: \"hidden\"}}>\n        <NoticeModal modalId={\"auto-logout-modal\"} noticeText={\"由於此帳號已於另一裝置/視窗上登入，此視窗將會登出帳號。\"} formSubmitHandler={autoLogoutFormHandler}></NoticeModal>\n        {!currentUser && <Login handleLogin={handleLogin}/>}\n        {currentUser && \n          <>\n          <ConfirmModal modalId={\"logout-modal\"} confirmText={\"你確定要登出嗎？\"} formSubmitHandler={logoutFormHandler}></ConfirmModal>\n          <NavBar currentUser={currentUser} handleLogout={()=>{document.getElementById(\"logout-modal\").classList.add('opened')}}/>\n          <Switch>\n            <Route exact path=\"/chatroom\">\n              <Chatroom currentUser={currentUser}/>\n            </Route>\n            <Route exact path=\"/supervisor\">\n              <Supervisor currentUser={currentUser}/>\n            </Route>\n            <Route exact path=\"/profile-update\">\n              <ProfileUpdate currentUser={currentUser}/>\n            </Route>\n            <Route path=\"/\">\n              <Dashboard currentUser={currentUser}/>\n            </Route>\n          </Switch>\n          </>\n        }\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD-gB_LHwUq2qiUXdDt2CAxGCYQQla4hMo\",\n  authDomain: \"heartlinehk-8e3ec.firebaseapp.com\",\n  databaseURL: \"https://heartlinehk-8e3ec-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"heartlinehk-8e3ec\",\n  storageBucket: \"heartlinehk-8e3ec.appspot.com\",\n  messagingSenderId: \"1077537941035\",\n  appId: \"1:1077537941035:web:f5b566fde9a2363a2d6c6e\",\n  measurementId: \"G-S9JD41562T\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\n\n//firebase.database().useEmulator(\"localhost\", 9000);\n//firebase.auth().useEmulator(\"http://localhost:9099\");\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}