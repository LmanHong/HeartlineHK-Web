{
    "rules": {
        "ig_posts":{
            ".read": true,
            ".write": false
        },
        "supervisors":{
            ".read": true,
            ".write": false,
            "$supervisor_id":{
                ".validate":"data.isNumber()"
            }
        },
        "preferred_names":{
            "$volun_id":{
                ".write": "auth.uid != null && auth.provider === 'password' && auth.uid === $volun_id",
                ".validate": "(!data.exists() && newData.hasChildren(['preferredName', 'lastName', 'firstName'])) || (data.hasChildren(['preferredName', 'lastName', 'firstName']) && newData.hasChild('preferredName')) || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false
        },
        "twilio_workers":{
            "$volun_id":{
                ".read": "auth.uid != null && auth.provider === 'password' && auth.uid === $volun_id",
                ".write": "auth.uid != null && auth.provider === 'password' && auth.uid === $volun_id",
                ".validate": "newData.isString() || !newData.exists()"
            },
            ".read": false,
            ".write": false
        },
        "chat_records":{
            "$chat_id":{
                ".read": false,
                ".write": "auth.uid != null && auth.provider === 'password' && !data.exists()",
                ".validate": "newData.hasChildren(['start', 'end', 'uid'])"
            },
            ".read": "auth.uid != null && auth.provider === 'password' && root.child('supervisors').child(auth.uid).exists()",
            ".write": false
        },
        "stripe_records":{
            "$reference_id":{
                ".validate": "data.isString()"   
            },
            ".read": false,
            ".write": false
        },
        "online_time":{
            "$volun_id":{
                ".read": "auth.uid != null && auth.provider === 'password' && auth.uid === $volun_id",
                ".write": "auth.uid != null && auth.provider === 'password' && auth.uid === $volun_id",
                ".validate": "newData.hasChildren(['uid', 'time']) || !newData.exists()"
            },
            ".read":"auth.uid != null && auth.provider === 'password'",
            ".write":false
        },
        "transfer_requests":{
            "$dest_volun_id":{
                ".write": "auth.uid != null && auth.provider === 'password' && ((newData.child('from').val() === auth.uid && root.child('chat_assigned').child(newData.child('client').val()).val() === auth.uid && newData.child('status').val() === 'pending') || ($dest_volun_id === auth.uid && data.child('status').val() === 'pending' && (newData.child('status').val() === 'accepted' || newData.child('status').val() === 'rejected')) || (data.child('from').val() === auth.uid && (data.child('status').val() === 'accepted' || data.child('status').val() === 'rejected' || data.child('status').val() === 'pending') && !newData.exists()))",
                ".validate": "newData.hasChildren(['time', 'client', 'from' ,'status']) || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false
        },
        "chat_queue":{
            "$user_id":{
                ".read":"auth.uid != null && auth.provider === 'anonymous' && auth.uid === $user_id",
                ".write":"(auth.uid != null && auth.provider === 'anonymous' && auth.uid === $user_id && (newData.child('status').val() === 'inQueue' || !newData.exists())) || (auth.uid != null && auth.provider === 'password' && data.exists() && (newData.child('status').val() === 'inQueue' || newData.child('status').val() === 'roomAssigned' || !newData.exists()))",
                ".validate":"newData.hasChildren(['status', 'time']) || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false,
            ".indexOn": ["time"]
        },
        "chat_assigned":{
            "$user_id":{
                ".read": "auth.uid != null && auth.provider === 'anonymous' && auth.uid === $user_id",
                ".write": "(auth.uid != null && auth.provider === 'password' && ((!data.exists() && newData.val() === auth.uid) || (data.val() === auth.uid && newData.val() === 'volunLeft') || (data.val() === auth.uid && !newData.exists()) || (data.val() === root.child('transfer_requests').child(auth.uid).child('from').val() && newData.val() === auth.uid))) || (auth.uid != null && auth.provider === 'anonymous' && auth.uid === $user_id && !newData.exists())",
                ".validate": "newData.isString() || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false
        },
        "call_queue":{
            "$user_id":{
                ".validate": "newData.hasChild('time') || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false,
            ".indexOn": ["time"]
        },
        "call_assigned":{
            "$user_id":{
                ".write": "auth.uid != null && auth.provider === 'password' && data.exists() && data.child('volunId').val() === auth.uid && !newData.exists()",
                ".validate": "newData.hasChildren(['time', 'volunId', 'taskSid', 'status', 'acceptedTime', 'enqueueTime']) || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false
        },
        "chat_log":{
            "$volun_id":{
                ".read": "auth.uid != null && ((auth.provider === 'password' && auth.uid === $volun_id) || (auth.provider === 'anonymous' && root.child('chat_assigned').child(auth.uid).val() === $volun_id) || (auth.provider === 'password' && root.child('transfer_requests').child(auth.uid).child('from').val() === $volun_id))",
                ".write": "auth.uid != null && ((auth.provider === 'password' && auth.uid === $volun_id) || (auth.provider === 'anonymous' && root.child('chat_assigned').child(auth.uid).val() === $volun_id))",
                "$msg_id":{
                    ".validate": "newData.hasChildren(['uid', 'time', 'msg']) || newData.hasChildren(['uid', 'time', 'spc'])"
                }
            },
            ".read": "auth.uid != null && auth.provider === 'password' && root.child('supervisors').child(auth.uid).exists()",
            ".write": false
        },
        "disconnect_time":{
            "$user_id":{
                ".read": "auth.uid != null && auth.provider === 'anonymous' && auth.uid === $user_id",
                ".write": "auth.uid != null && auth.provider === 'anonymous' && auth.uid === $user_id",
                ".validate": "(newData.isNumber() && newData.val() <= now) || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false
        },
        "typing_status":{
            "$user_id":{
                ".read": "auth.uid != null && auth.provider === 'anonymous' && root.child('chat_assigned').child(auth.uid).val() === $user_id",
                ".write": "auth.uid != null && (auth.provider === 'anonymous' || auth.provider === 'password') && auth.uid === $user_id",
                ".validate": "newData.isBoolean() || !newData.exists()"
            },
            ".read": "auth.uid != null && auth.provider === 'password'",
            ".write": false
        },
        ".read": false,
        ".write": false
    }
}